#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import hss_utils
import e3utils.log
_INF = e3utils.log.info
_DEB = e3utils.log.debug
_ERR = e3utils.log.error
_WRN = e3utils.log.warning


import os
CWD = os.getcwd()
import os.path
import time
import shutil
import hashlib
import tempfile
import socket
import traceback
import argparse
import subprocess
import cmd
from optparse import OptionParser
from datetime import datetime

from hss_utils.st_command import *

try:
    import hss_utils.rosetta
    import hss_utils.rosetta.services
    _ROSETTA_AVAILABLE_ = True
except ImportError, e:
    _WRN('Cannot import hss_utils.rosetta: %s' % e)
    _WRN('Rosetta access will be disabled')
    _ROSETTA_AVAILABLE_ = False

AUTO_PROVISIONER = 'automatic_provisioner.csh'
MACRO_FILE = ''
def set_macro_file(name):
    global MACRO_FILE
    MACRO_FILE = name

RADIUS_FILE_TEMP = ''
def set_radius_file(name):
    global RADIUS_FILE_TEMP
    RADIUS_FILE_TEMP = name

LOG_PREFIX = os.path.join(CWD, ('ldap_erros/'))

def set_env_var(var_name, var_value):
    global ENV_VAR
    ENV_VAR[var_name] = var_value

ENV_NAME = None
ENV_CONFIG = None
def get_env_data():
    global ENV_NAME
    global ENV_CONFIG
    if ENV_CONFIG is None:
        _INF('Using rosetta for getting enviroment info')
        env, config = hss_utils.rosetta.services.get_env_for_localhost()
        _INF('Environment  :%s' % env)
        ENV_NAME = env
        ENV_CONFIG = config

    return ENV_CONFIG

ENV_VAR = {
# 
# HSS CABINET
# 
'TSP' : '',
'OAM_VIP' : '',
'TRAFFIC_VIP' : '',
'SIGTRAN_VIP' : '',
'IO2_IP' : '',

# 
# SLF CABINET
# 
'SLF_TSP' : '',
'SLF_OAM_VIP' : '',
'SLF_TRAFFIC_VIP' : '',
'SLF_SIGTRAN_VIP' : '',
'SLF_IO2_IP' : '',

# 
# REDUNDANCY SECONDARY CABINET
# 
'SECONDARY_TSP' : '',
'SECONDARY_OAM_VIP' : '',
'SECONDARY_TRAFFIC_VIP' : '',
'SECONDARY_SIGTRAN_VIP' : '',
'SECONDARY_IO2_IP' : '',

# 
# EXTDB
# 
'EXT_DB_IP' : '',
'EXT_DB_OAM_IP' : '',
'EXT_DB_PORT' : '',

# 
# COMMON
# 
'MO_LA' : '',
'LDAPPORT' : '7323',
'LDAPORDER' : 'ldap:',
'LDAPDIR' : '/tsp/3rdParty/LDAP-SSL/bin',
'LOG_PATH' : LOG_PREFIX,
'LDAPERRORS': LOG_PREFIX,
'IMSILEN': '15',
'MSISDNLEN' : '12'
}

VIP_SUFFIXES = ['vipt', 'vipo', '2']

EXIT_ERRORS =  {
0: 'Success',
1: 'Command line error',
2: 'Population script failed',
3: 'User send Ctrl-C',
50:'Source code error'
}

# Exit status
EXIT_CODE = 0
SUCCESS = 0
CMDLINE_ERROR = 1
POPULATION_SCRIPT_ERROR = 2
CTRL_C = 3
SOURCE_CODE_ERROR = 50

def quit_program(exit_code):
    global EXIT_CODE

    EXIT_CODE = exit_code
    _DEB('Exit code: %s (%s)' % (EXIT_CODE, EXIT_ERRORS.get(EXIT_CODE, 'unknown error code')))
    sys.exit(EXIT_CODE)

class Cabinet(object):
    def __init__(self, name):
        assert(isinstance(name, str) )
        self.__name = name
        self.__vip_data = {}
        for vip in VIP_SUFFIXES:
            self.__vip_data[vip] = resolve_hostname('%s%s' % (self.name, vip))

    @property
    def name(self):
        return self.__name

    @property
    def vip_data(self):
        return self.__vip_data

    def set_env_var(self, prefix = ''):
        global ENV_VAR

        set_env_var(prefix ,self.name)
        set_env_var(prefix + 'OAM_VIP',self.__vip_data['vipo'])
        set_env_var(prefix + 'TRAFFIC_VIP',self.__vip_data['vipt'])
        set_env_var(prefix + 'SIGTRAN_VIP',self.__vip_data['vipt'])
        set_env_var(prefix + 'IO2_IP',self.__vip_data['2'])

    def get_missing_ip(self):
        misssing = ''
        for vip in VIP_SUFFIXES:
            if self.__vip_data[vip] is None:
                misssing += '%s%s ' % (self.name, vip)
        return misssing

    def set_vip(self, vip_name, new_address):

        assert(isinstance(vip_name, str) and (isinstance(new_address, str) or isinstance(new_address, unicode)))
        if vip_name not in VIP_SUFFIXES:
            raise KeyError(vip_name)
        else:
            # Do nothing if address is empty
            if (new_address is None) or (new_address == ''):
                return
            self.__vip_data[vip_name] = new_address

import socket
HOSTNAME = socket.gethostname()

def get_cabinet(machine, secondary=False):

    vip_info=[]
    if len(machine):
        data = parse_vip_parameter(machine[0])
        if len(data) == 3:
            vip_info = data
        else:
            _ERR('Wrong IP list %s. It shall be VIPT:VIPO:IO2"' % machine)
            quit_program(1)

    else:
        try:
            config = get_env_data()
            cabinet = 1 if secondary else 0
            vip_info.append(config.get_cabinet_vip_raddia(cabinet=cabinet))
            vip_info.append(config.get_cabinet_oam_vip(cabinet=cabinet))
            vip_info.append(config.get_cabinet_cc2(cabinet=cabinet))

        except (hss_utils.rosetta.ObjectNotFound, hss_utils.rosetta.RosettaUnavailable), e:
            _ERR('Error: %s. Use IP values' % str(e))
            quit_program(1)
        except IndexError:
            _ERR('Error: data from rosetta has less cabinets than expected')
            quit_program(1)

    cabinet = Cabinet('')
    for vip in vip_info:
        if validate_ip(vip,IPv6=False):
            cabinet.set_vip(VIP_SUFFIXES[vip_info.index(vip)], vip)
        else:
            _ERR('Missing/wrong %s in IP list %s. It shall be VIPT:VIPO:IO2"' % (VIP_SUFFIXES[vip_info.index(vip)], machine))
            quit_program(1)
    return cabinet


def get_radius_client_ip(client):
    if validate_ip(client,IPv6=False):
        return client
    else:
        return resolve_hostname(client)

def create_radius_file(args):
    node = 'SLF'
    if args.slf is None and args.slf_hss is None:
        node = 'SM'

    file_name =  '%s_%s.data' % (os.path.join(CWD, 'Radius_Clients'), os.getpid())
    set_radius_file(file_name)

    fd = open(file_name, 'w')
    fd.write('NODE %s\n' % node)
 
    for generator in args.generators:
        fd.write('%s ' % get_radius_client_ip(generator))

    fd.write('\n')
    fd.close()

def create_macro_file(args):
    origin = open(args.macro,'r')
    file_name = os.path.join(CWD, '%s_%s' % (os.path.basename(args.macro), os.getpid()))
    set_macro_file(file_name)
    fd = open(file_name, 'w')

    for line in origin.readlines():
        is_comment = False
        for begin in ['#', '//']:
            if line.startswith(begin):
                is_comment = True

        if is_comment:
            fd.write(line)
            continue

        if 'CONFIG_FILE:'in line:
            continue
        if 'POPULATE_RADIUS_CLIENTS'in line:
            fd.write('STEP:|POPULATE_RADIUS_CLIENTS:%s\n' % RADIUS_FILE_TEMP)
        else:
            fd.write(line)

    fd.close()

def parse_commandline():

    parser = argparse.ArgumentParser(
            formatter_class=argparse.RawTextHelpFormatter,
            description='tool for populating SLF|HSS|ExtDb '
    )

    scenario_params = parser.add_argument_group('Define population scenario ')
    scenario_params.add_argument('--hss', nargs='*',
                        default=None, action='store', dest='hss',
                        help='''IP list (VIPT:VIPO:IO2) of the cabinet where HSS is installed.
If ommitted local hostname will be used to find env in rosetta''')
    scenario_params.add_argument('--slf', nargs='*',
                        default=None, action='store', dest='slf',
                        help='''IP list (VIPT:VIPO:IO2) of the cabinet where SLF is installed.
If ommitted local hostname will be used to find env in rosetta''')

    scenario_params.add_argument('--slf_hss', nargs='*',
                        default=None, action='store', dest='slf_hss',
                        help='''IP list (VIPT:VIPO:IO2) of the cabinet where both SLF and HSS are installed.
If ommitted local hostname will be used to find env in rosetta''')

    scenario_params.add_argument('--secondary', nargs='*',
                        default=None, action='store', dest='secondary',
                        help='''Needed in GeoRed scenario.IP list (VIPT:VIPO:IO2) of the secondary cabinet.
If ommitted local hostname will be used to find env in rosetta''')

    scenario_params.add_argument('--extdb', nargs='*',
                        default=None, action='store', dest='extdb',
                        help='''Set the ExtDb network data IP:PORT.
If ommitted local hostname will be used to find env in rosetta''')

    scenario_params.add_argument('-r', '--radius_clients', nargs='*',
                        action='store', default=None,
                        help='Set a list of traffic generators that need to be populated as Radius Clients.',
                        dest='generators')

    population_params = parser.add_argument_group('Tune population parameter')
    population_params.add_argument('-m', '--macro',
                      action='store', default=None,
                      help='Set the absolute path of macro file',
                      dest='macro')

    population_params.add_argument('-v', '--verbose',
                      action='store_true', default=False,
                      help='Verbose. Prints internal input/output from command.',
                      dest='verbose')

    logging=e3utils.log.add_logging_options(parser)


    args = parser.parse_args() 
    if args.verbose:
        args.e3utils_log_debug = args.verbose
        args.e3utils_log_debug_internal = args.verbose

    e3utils.log.CONSOLE_PREFIX='(PLM_Populator_%s.log)' % os.getpid()
    e3utils.log.setup_logging_options(args)
 
    if args.log_file is None:
        e3utils.log.add_file_logging(os.path.join(CWD, 'PLM_Populator_%s.log' %  os.getpid()),
                                     level=e3utils.log.DEBUG)
 
    with open(os.path.realpath(__file__), 'r') as myself:
        _DEB('** Binary MD5: %s' % hashlib.md5(myself.read()).hexdigest())
    _DEB('** Commandline: "%s"' % ' '.join(sys.argv))

    if args.extdb is None and args.hss is None and args.slf is None and args.slf_hss is None:
        _ERR('One of these args SHOULD be set --hss | --slf | --slf_hss | --extdb ')
        quit_program(CMDLINE_ERROR)

    if args.macro is None:
        _ERR('Macro parameter is mandatory ')
        quit_program(CMDLINE_ERROR)

    if os.path.isfile(args.macro) == False:
        _ERR('%s file not found' % args.macro)
        quit_program(CMDLINE_ERROR)

    return (args)


def main():

    args = parse_commandline()

    if args.slf_hss is not None:
        hss = get_cabinet(args.slf_hss)
        hss.set_env_var('')
        missing = hss.get_missing_ip() 
        if missing != '':
            _ERR('Not value for %s' % missing)
            quit_program(CMDLINE_ERROR)

        slf = get_cabinet(args.slf_hss)
        slf.set_env_var('SLF_')
        missing = slf.get_missing_ip() 
        if missing != '':
            _ERR('Not value for %s' % missing)
            quit_program(CMDLINE_ERROR)

    if args.hss is not None:
        hss = get_cabinet(args.hss)
        hss.set_env_var('')
        missing = hss.get_missing_ip() 
        if missing != '':
            _ERR('Not value for %s' % missing)
            quit_program(CMDLINE_ERROR)

    if args.slf is not None:
        slf = get_cabinet(args.slf)
        slf.set_env_var('SLF_')
        missing = slf.get_missing_ip() 
        if missing != '':
            _ERR('Not value for %s' % missing)
            quit_program(CMDLINE_ERROR)

    if args.secondary is not None:
        secondary =  get_cabinet(args.secondary, secondary=True)
        secondary.set_env_var('SECONDARY_')
        missing = secondary.get_missing_ip() 
        if missing != '':
            _ERR('Not value for %s' % missing)
            quit_program(CMDLINE_ERROR)

    if args.extdb is not None:

        set_env_var('MO_LA', 'LA')
        if args.extdb:
            extDb = args.extdb[0].split(':')
            extdb_ip = get_ip(extDb[0])
            set_env_var('EXT_DB_IP', extdb_ip)
            set_env_var('EXT_DB_OAM_IP', extdb_ip)

            try:
                port = int(extDb[1])
            except:
                _ERR('In option --extdb HOSTNAME|IP:PORT       PORT requires a integer port number')
                quit_program(CMDLINE_ERROR)

        else:
            config = get_env_data()
            if len(config.raw['extdbs']) == 0:
                _ERR('There is not ExtDb in %s enviroment' % ENV_NAME)
                quit_program(CMDLINE_ERROR)
            elif len(config.raw['extdbs']) > 1:
                _ERR('More than one ExtDb in %s enviroment. Use --extdb HOSTNAME|IP:PORT' % ENV_NAME)
                quit_program(CMDLINE_ERROR)
            else:
                set_env_var('EXT_DB_IP', config.get_extdb_ldap_ip(extdb=0))
                set_env_var('EXT_DB_OAM_IP', config.get_extdb_oam_ip(extdb=0))
                port = 389

        set_env_var('EXT_DB_PORT', port)

    else:
        set_env_var('MO_LA', 'MO')

    if  args.generators is not None:
        print args.generators
        if not len(args.generators):
            try:
                config = get_env_data()

                args.generators = config.active_generators
                _INF('Generators   :%s' % ' '.join(args.generators))
            except (hss_utils.rosetta.ObjectNotFound, hss_utils.rosetta.RosettaUnavailable), e:
                _ERR('Error: %s. Use values' % str(e))
                quit_program(1)
        create_radius_file(args)


    # Set enviroment variables
    for key in sorted(ENV_VAR):
        _INF('Scenario variable %s = %s' % (key,str(ENV_VAR[key])))
        os.environ[key]= str(ENV_VAR[key])

    create_macro_file(args)

    cmd = '%s %s' % (AUTO_PROVISIONER, MACRO_FILE)
    _INF('Running %s' % repr(cmd))
    try:
        proc = subprocess.check_call(cmd,
                                     shell=True)

        _INF('Cmd ok')
        quit_program(SUCCESS)

    except subprocess.CalledProcessError, e:
        _ERR('Cmd return code %s' % e)
        quit_program(POPULATION_SCRIPT_ERROR)

    except KeyboardInterrupt:
        _WRN('User send Ctrl-C. Stopped cmd execution')
        quit_program(CTRL_C)

    except Exception, e:
        _ERR('Cmd result error : %s' % repr(str(e)))
        quit_program(POPULATION_SCRIPT_ERROR)

    quit_program(SUCCESS)


if __name__ == '__main__':
    # Start log session

    try:
        main()
    except KeyboardInterrupt:
        _ERR('Unhandled Ctr-C, please report this LOG to tools team')
        _DEB('** STACK TRACE **')
        exc_type, exc_value, exc_traceback = sys.exc_info()
        for tb in traceback.format_tb(exc_traceback):
            _DEB(tb)
        quit_program(SOURCE_CODE_ERROR)
    except Exception, e:
        _ERR('Unhandled Exception, please report this LOG to tools team')
        _DEB('Additional information: %s' % str(e))
        _DEB('** STACK TRACE **')
        exc_type, exc_value, exc_traceback = sys.exc_info()
        for tb in traceback.format_tb(exc_traceback):
            _DEB(tb)
        for tb in traceback.format_exception(exc_type, exc_value, exc_traceback):
            _DEB(tb)
        quit_program(SOURCE_CODE_ERROR)

    quit_program(SUCCESS)
