#!/usr/bin/env python
#

import sys
import os
CWD = os.getcwd()
import os.path
import time
import shutil
import hashlib
import tempfile
import pexpect
import socket
HOSTNAME = socket.gethostname()
import traceback
import argparse
import re
import copy
import json

import ntpath
import signal
import textwrap
from datetime import datetime
import hss_utils
import hss_utils.st_command as st_command
import hss_utils.connection as connection
import hss_utils.node
import hss_utils.node.cba
import HSS_rtc_lib.components.test_cases as test_cases

def quit_gracefully(*args):
    raise KeyboardInterrupt("Signal handler")

import e3utils.log
_INF = e3utils.log.info
_DEB = e3utils.log.debug
_ERR = e3utils.log.error
_WRN = e3utils.log.warning

try:
    import hss_utils.rosetta
    import hss_utils.rosetta.services
    _ROSETTA_AVAILABLE_ = True
except ImportError as e:
    _WRN('Cannot import hss_utils.rosetta: %s' % e)
    _WRN('Rosetta access will be disabled')
    _ROSETTA_AVAILABLE_ = False

NODE=None
def quit_program(exit_code,message=''):
    global NODE
    if NODE:
        NODE.release()

    if message != '':
        _INF('stTool_message %s ' % message)

    _DEB('Exit code: %s (%s)' % (exit_code, st_command.EXIT_ERRORS.get(exit_code, 'unknown error code')))
    sys.exit(exit_code)


def display_info_ntp(ntp_servers_info):
    info_ntp_servers ='\nNTP ID \tSERVER ADRRESS\n------ \t----------------'
    for id_ntp in sorted(ntp_servers_info.keys()):
        info_ntp_servers = info_ntp_servers + '\n' + '%s \t%s' % (id_ntp, ntp_servers_info[id_ntp])
    return info_ntp_servers

def update_ntp_servers_file(filename,list_ntp_servers):
    filename_out = '%s.out' % filename
    num_ntps = len(list_ntp_servers)
    idx_ntp = 0
    fin = open(filename, 'r')
    fout = open(filename_out, 'w')
    for line in fin.readlines():
        if line.startswith('ntp'):
            _DEB('Removing ntp line: %s' % line)
            while (idx_ntp < num_ntps):
                line = 'ntp %s\n' % list_ntp_servers[idx_ntp]
                _DEB('Adding new lines: %s' % line)
                fout.write(line)
                idx_ntp +=1
        else:
            fout.write(line)

    fin.close()
    fout.close()
    return filename_out


def main():
    global NODE
    user_config = parse_commandline()
    access_config = {'host':user_config.NODE,
                        'port':user_config.port,
                        'user':user_config.user}

    try:

        TC = test_cases.CBA_TestCaseBase(access_config, user_config.stand_alone)
        TC.connect_to_node()
        NODE = hss_utils.node.cba.Cba(config = access_config)

        if user_config.ntp_servers:
            _DEB('NTP servers passed as parameters:\n %s' % user_config.ntp_servers)
            if len(user_config.ntp_servers) > 2:
                error_info = 'Wrong number of NTP servers. Only one or 2 are allowed.'
                _ERR(error_info)
                quit_program(st_command.WRONG_PARAMETER, error_info)

            for ntp_server in user_config.ntp_servers:
                if st_command.validate_ip(ntp_server):
                    _INF('NTP server passed as parameter with IP %s is valid' % ntp_server)
                else:
                    error_info = 'Wrong IP adress format: %s ' % ntp_server
                    _ERR(error_info)
                    quit_program(st_command.WRONG_PARAMETER, error_info)
            if len(user_config.ntp_servers) == 1:
                list_ntp_servers = user_config.ntp_servers
                list_ntp_servers.append(user_config.ntp_servers[0])
                _DEB('NTP servers now are :\n %s' % list_ntp_servers)
                user_config.ntp_servers = list_ntp_servers
        else:
            error_info = 'NTP servers not defined in the command.'
            _ERR(error_info)
            quit_program(st_command.WRONG_PARAMETER, 'Mandatory parameter ntp_servers has been omited.')

        ntp_info = NODE.get_ntp_servers_info_cliss()
        _INF('Current configuration of NTP servers:\n %s' % display_info_ntp(ntp_info))

        idx = 0
        for ntp_ip in user_config.ntp_servers:
            cmd = 'lde-config ntp change --id %d --address %s' % (idx, ntp_ip)
            output = TC.run_node_command(cmd, timeout=180, full_answer=True)
            idx +=1

        for ntp_ip in user_config.ntp_servers:
            cmd = 'grep %s /etc/ntp.conf' % ntp_ip
            output = TC.run_node_command(cmd, timeout=180, full_answer=True)
            if ntp_ip in output:
                _INF('NTP_SERVER IP %s well configured in /etc/ntp.conf file' % ntp_ip)
            else:
                error_info = 'NTP_SERVER IP %s NOT configured in /etc/ntp.conf file' % ntp_ip
                _ERR(error_info)
                quit_program(st_command.EXECUTION_ERROR, error_info)

        cmd = 'lde-config ntp show'
        _INF('Showing NTP configuration after the changes')
        output = TC.run_node_command(cmd, timeout=180, full_answer=True)
        _INF('NTP show:\n%s' % output)
        for ntp_ip in user_config.ntp_servers:
            if ntp_ip in output:
                _INF('NTP_SERVER IP %s corrected defined in LDE-CONFIG' % ntp_ip)
            else:
                error_info = 'NTP_SERVER IP %s NOT definied in LDE-CONFIG' % ntp_ip
                _ERR(error_info)
                quit_program(st_command.EXECUTION_ERROR, error_info)

        list_pls = NODE.payload
        _INF('Checking nodes are synchronized with the NTP server. It may take several minutes ...')
        
        # Waiting for the new PLs to be configured in the system
        sync_timeout = float(user_config.max_time)
        while  True:
            now = time.time()
            time.sleep(float(20))
            num_pl_notsync = 0
            for pl in list_pls:
                _DEB('Checking Node %s synchronized with the NTP server' % pl)
                cmd = 'ssh %s timedatectl' % pl
                output = TC.run_node_command(cmd, timeout=180, full_answer=True)
                if 'NTP synchronized: yes' in output:
                    _DEB('Node %s synchronized with the NTP server' % pl)
                else:
                    num_pl_notsync += 1

            if num_pl_notsync > 0:
                _INF('Not synchronized yet')
            else:
                _INF('All nodes synchronized with the NTP server as expected')
                break

            sync_timeout -= time.time() - now
            if sync_timeout < 0:
                error_info = 'Error: Timeout waiting for Nodes to be synchronized'
                _ERR(error_info)
                quit_program(st_command.EXECUTION_ERROR, error_info)


        ntp_info = NODE.get_ntp_servers_info_cliss()
        _INF('Current configuration of NTP servers after changes:\n %s' % display_info_ntp(ntp_info))

    except IOError as e:
        error_info = 'Error: %s' % str(e)
        _ERR(error_info)
        quit_program(st_command.EXECUTION_ERROR, error_info)

    except connection.Unauthorized as e:
        error_info = 'Error: %s' % str(e)
        _ERR(error_info)
        quit_program(st_command.AUTHENTICATION_ERROR, error_info)

    except (connection.ConnectionTimeout, connection.ConnectionFailed) as e:
        error_info = 'Error: %s' % str(e)
        _ERR(error_info)
        quit_program(st_command.CONNECTION_ERROR, error_info)

    except (connection.ConnectionFailedTimeout ,connection.ConnectionFailedEOF) as e:
        error_info = 'Error: %s' % str(e)
        _ERR(error_info)
        quit_program(st_command.CONNECTION_ERROR, error_info)

    except (st_command.WrongParameter) as e:
        _DEB('Error: %s' % str(e))
        quit_program(st_command.WRONG_PARAMETER, str(e))

    except test_cases.ClissError as e:
        error_info = '%s' % str(e)
        _ERR(error_info)
        quit_program(st_command.EXECUTION_ERROR,error_info.split('\n')[0])

    except st_command.CommandFailure as e:
        _ERR('Error: %s' % str(e))
        quit_program(st_command.EXECUTION_ERROR,str(e))

    except KeyboardInterrupt:
        _INF('Execution stopped by user!')

    quit_program(st_command.SUCCESS)

def parse_commandline():

    parser = argparse.ArgumentParser(
                        formatter_class=argparse.RawDescriptionHelpFormatter,
                        description='Update NTP servers in a CBA node',
                        epilog=textwrap.dedent(st_command.get_exit_status())
    )

    access_params = parser.add_argument_group('Access options')
    access_params.add_argument('-n','--node',
                        action='store', default=None,
                        help='OAM  IP address of the node. If ommitted local hostname will be used to find env in rosetta',
                        dest='NODE')

    access_params.add_argument('--port',
                      action='store', default=22,
                      help='Port used in ssh.  Default value is 22',
                      dest='port')

    access_params.add_argument('--user',
                      action='store', default='com-emergency',
                      help='User for ssh.  Default value is "com-emergency"',
                      dest='user')


    command_params = parser.add_argument_group('Specific command options')
    command_params.add_argument('--ntp-servers', nargs='+',
                      action='store', default=None,
                      help='List of ntp_server IPs to be updated. If only one, it will replace one of the 2 existed in the system.',
                      dest='ntp_servers')

    command_params.add_argument('--max_time',
                    default=300, type=int, action='store', dest='max_time',
                    help='Max time waiting for synchronization of the nodes. By default is "%(default)s"')

    command_params.add_argument('-s','--stand_alone',
                      action='store_true', default=False,
                      help='Allow the usage without HSS_rtc.',
                      dest='stand_alone')

    logging=e3utils.log.add_logging_options(parser)

    args = parser.parse_args()

    e3utils.log.CONSOLE_PREFIX='(CBA_update_ntp_servers_node_%s.log)' % os.getpid()
    e3utils.log.setup_logging_options(args)

    if args.log_file is None:
        e3utils.log.add_file_logging(os.path.join(CWD, 'CBA_update_ntp_servers_node_%s.log' % os.getpid()),
                                     level=e3utils.log.DEBUG)

    with open(os.path.realpath(__file__), 'r') as myself:
        if sys.version_info[0] == 2:
            _DEB('** Binary MD5: %s' % hashlib.md5(myself.read()).hexdigest())
        else:
            _DEB('** Binary MD5: %s' % hashlib.md5(str.encode(myself.read())).hexdigest())
    _DEB('** Commandline: "%s"' % ' '.join(sys.argv))

    if args.NODE is None:
        _INF('Using rosetta for getting enviroment info')
        try:
            env, config = hss_utils.rosetta.services.get_env_for_localhost()
            _INF('Environment  : %s' % env)
            args.NODE = config.get_cabinet_oam_vip(cabinet=0)
            _INF('Node         :%s' % args.NODE)

        except (hss_utils.rosetta.ObjectNotFound, hss_utils.rosetta.RosettaUnavailable) as e:
            error_info = 'Error: %s. Use command line parameter --node' % str(e)
            _ERR(error_info)
            quit_program(st_command.ROSETTA_ERROR, error_info)

    return (args)



if __name__ == '__main__':
    signal.signal(signal.SIGINT, quit_gracefully)
    try:
        main()
    except KeyboardInterrupt:
        _ERR('Unhandled Ctr-C, please report this LOG to tools team')
        _DEB('** STACK TRACE **')
        exc_type, exc_value, exc_traceback = sys.exc_info()
        for tb in traceback.format_tb(exc_traceback):
            _DEB(tb)
        quit_program(50)
    except Exception as e:
        _ERR('Unhandled Exception, please report this LOG to tools team')
        _ERR('Additional information: %s' % str(e))
        _ERR('** STACK TRACE **')
        exc_type, exc_value, exc_traceback = sys.exc_info()
        for tb in traceback.format_tb(exc_traceback):
            _ERR(tb)
        for tb in traceback.format_exception(exc_type, exc_value, exc_traceback):
            _ERR(tb)
        quit_program(st_command.IMPLEMENTATION_ERROR)

    quit_program(0)



