#!/usr/bin/python
# coding=iso-8859-1

import sys
import os
CWD = os.getcwd()
import os.path
import time
import shutil
import hashlib
import tempfile
import socket
import traceback
import argparse
import re
import pprint
import pexpect

import ntpath
import signal
import textwrap
import socket
import getpass
import json

#import Queue
#import subprocess
import hss_utils
import hss_utils.st_command as st_command
import hss_utils.connection as connection
import hss_utils.node
import hss_utils.node.gentraf
import hss_utils.rosetta
import hss_utils.rosetta.services

def quit_gracefully(*args):
    raise KeyboardInterrupt("Signal handler")

import e3utils.log
_INF = e3utils.log.info
_DEB = e3utils.log.debug
_ERR = e3utils.log.error
_WRN = e3utils.log.warning

try:
    import hss_utils.rosetta
    import hss_utils.rosetta.services
    _ROSETTA_AVAILABLE_ = True
except ImportError as e:
    _WRN('Cannot import hss_utils.rosetta: %s' % e)
    _WRN('Rosetta access will be disabled')
    _ROSETTA_AVAILABLE_ = False


def quit_program(exit_code, message=''):

    if message != '':
        _INF('stTool_message: %s ' % message)

    _DEB('Exit code: %s (%s)' % (exit_code, st_command.EXIT_ERRORS.get(exit_code, 'unknown error code')))
    sys.exit(exit_code)


def check_sw_version (sw_version_env1,sw_version_env2):
    """ Checks that the sw_version of one environment is also in the over environment """

    n_sw_version_env1 =len(sw_version_env1.split('\n'))
    n_sw_version_env2 =len(sw_version_env2.split('\n'))
    sw_version_check_ok=1
    if (n_sw_version_env1 > n_sw_version_env2):
    # We check the SW versions found in Env2 are contained in the SW versions of Env1)
        for sw_version in sw_version_env2.split('\n'):
            if len(sw_version) > 0: # Skipping the last empty line
                if sw_version in sw_version_env1:
                    _INF( 'SW Version %s found in both environments. OK' % sw_version)
                else:
                    _WRN( 'SW Version %s found in %s but not in %s ' % (sw_version, env1_name,env2_name))
                    sw_version_check_ok=0
                    _INF( 'Check the SW Version files to see the differences')
    else:
    # We check the SW versions found in Env1 are contained in the SW versions of Env2
        for sw_version in sw_version_env1.split('\n'):
            if len(sw_version) > 0: # Skipping the last empty line
                if sw_version in sw_version_env2:
                    _INF( 'SW Version %s found in both environments. OK' % sw_version)
                else:
                    _WRN( 'SW Version %s found in %s but not in %s ' % (sw_version, env1_name,env2_name))
                    sw_version_check_ok=0
                    _INF( 'Check the SW Version files to see the differences')

    return sw_version_check_ok


def decompress_config_info_file(tgz_file,dest_dir):
    """ Decompress the tgz file in the directory passed as parameters. It return the IP of the environment based on the files contained in the tgz file """

    cmd = 'tar -xzf %s -C %s' % (tgz_file,dest_dir)
    _INF('Executing: %s' % cmd)
    (output,output_err,output_code) = st_command.execute_cmd(cmd, stdout=True, stderr=True)
    if output_code:
        _ERR( '\n Error when uncompressing file %s on %s directory' % (tgz_file,dest_dir))
        quit_program(st_command.EXECUTION_ERROR)

    # Getting the IP of the environment from the files of the compressed files
    cmd = 'tar -tvf %s | grep HSS_VERSION | cut -d "." -f 2-' % (tgz_file)
    _INF('Executing: %s' % cmd)
    (output,output_err,output_code) = st_command.execute_cmd(cmd, stdout=True, stderr=True)
    if output_code:
        _ERR( '\n Error when getting the IP from the compressed file %s ' % tgz_file)
        quit_program(st_command.EXECUTION_ERROR)
    _INF('IP of the environment obtained from the compressed file: %s' % output.strip())
    return output.strip()


def get_name_environment(OAM_IP,USER,PORT):
    """ Gets the name of the environment of the OAM IP passed as parameter """

    # Getting name of the environments to check
    cmd = '\"grep host /cluster/etc/cluster.conf | grep 199 | cut -d \\\\\\\" \\\\\\\" -f4 \"'
    cba_cmd = 'CBA_run_command --node %s --user %s --port %s %s' % (OAM_IP,USER,PORT,cmd)
    _DEB('command:%s' % cba_cmd)

    (output,output_err,output_code) = st_command.execute_cmd(cba_cmd, stdout=True, stderr=True)
    if output_code:
        _ERR( '\n Error when getting access to IP %s' % OAM_IP)
        quit_program(st_command.CONNECTION_ERROR)
    else:
        for env_name in output.split('\n'):
            if len(env_name) > 0:
                env_name=env_name.strip()
                return env_name

    return 'ERROR'


def compare_info_hss_env(OAM_IP1,OAM_IP2,DIR_DEST):
    """ Compares the info obtained from the HSS environments to check that it is the same """
    
    compare_OK = True
    # Checking cmw-repository-list info
    _INF( '### Comparing cmw-repository-list info ')
    cmd = 'sort %s/cba_repository_list.%s -o %s/cba_repository_list_tmp.%s' % (DIR_DEST,OAM_IP1,DIR_DEST,OAM_IP1)
    _INF( 'Executing cmd: %s' % cmd)
    (output,output_err,output_code) = st_command.execute_cmd(cmd, stdout=True, stderr=True)
    if output_code:
        _ERR( 'Error when sorting cba_repository_list file')
        quit_program(st_command.EXECUTION_ERROR)

    cmd = 'sort %s/cba_repository_list.%s -o %s/cba_repository_list_tmp.%s' % (DIR_DEST,OAM_IP2,DIR_DEST,OAM_IP2)
    (output,output_err,output_code) = st_command.execute_cmd(cmd, stdout=True, stderr=True)
    if output_code:
        _ERR( 'Error when sorting cba_repository_list file')
        quit_program(st_command.EXECUTION_ERROR)

    cmd = 'diff %s/cba_repository_list_tmp.%s %s/cba_repository_list_tmp.%s >%s/cba_repository_list.DIFF' % (DIR_DEST,OAM_IP1,DIR_DEST,OAM_IP2,DIR_DEST)
    _DEB('Executing command:%s' % cmd)
    (output,output_err,output_code) = st_command.execute_cmd(cmd, stdout=True, stderr=True)
    if output_code:
        _WRN( 'WARNING: cmw-repository-list info is not the same. Check cba_repository_list.DIFF file to see the differences.')
        compare_OK = False
    else:
        _INF( 'Check cmw-repository-list OK ')

    # Comparing rpms installed info
    _INF( '### Comparing rpms installed info ')
    cmd = 'cat %s/rpms_installed_n1.%s %s/rpms_installed_n2.%s %s/rpms_installed_n3.%s %s/rpms_installed_n4.%s | sort -o %s/rpms_installed_tmp.%s' % (DIR_DEST,OAM_IP1,DIR_DEST,OAM_IP1,DIR_DEST,OAM_IP1,DIR_DEST,OAM_IP1,DIR_DEST,OAM_IP1)
    (output,output_err,output_code) = st_command.execute_cmd(cmd, stdout=True, stderr=True)
    if output_code:
        _ERR( 'Error when sorting rpms installed files')
        quit_program(st_command.EXECUTION_ERROR)

    cmd = 'cat %s/rpms_installed_n1.%s %s/rpms_installed_n2.%s %s/rpms_installed_n3.%s %s/rpms_installed_n4.%s | sort -o %s/rpms_installed_tmp.%s' % (DIR_DEST,OAM_IP2,DIR_DEST,OAM_IP2,DIR_DEST,OAM_IP2,DIR_DEST,OAM_IP2,DIR_DEST,OAM_IP2)
    (output,output_err,output_code) = st_command.execute_cmd(cmd, stdout=True, stderr=True)
    if output_code:
        _ERR( 'Error when sorting rpms installed files')
        quit_program(st_command.EXECUTION_ERROR)

    cmd = 'diff %s/rpms_installed_tmp.%s %s/rpms_installed_tmp.%s >%s/rpms_installed.DIFF' % (DIR_DEST,OAM_IP1,DIR_DEST,OAM_IP2,DIR_DEST)
    _DEB('command:%s' % cmd)

    (output,output_err,output_code) = st_command.execute_cmd(cmd, stdout=True, stderr=True)
    if output_code:
        _WRN( 'WARNING: rpms installed info is not the same. Check rpms_installed.DIFF file to see the differences.')
        compare_OK = False
    else:
        _INF( 'Check rpms installed OK ')

    # Comparing HSS_VERSION  info
    _INF( '### Comparing HSS_VERSION and release info ')
    cmd = 'diff %s/HSS_VERSION.%s %s/HSS_VERSION.%s >%s/HSS_VERSION.DIFF' % (DIR_DEST,OAM_IP1,DIR_DEST,OAM_IP2,DIR_DEST)
    _DEB('command:%s' % cmd)

    (output,output_err,output_code) = st_command.execute_cmd(cmd, stdout=True, stderr=True)
    if output_code:
        _WRN( 'WARNING: HSS_VERSION info is not the same. Check HSS_VERSION.DIFF file to see the differences.')
        compare_OK = False
    else:
        _INF( 'Check HSS_VERSION OK ')

    cmd = 'diff %s/HSS_release.%s %s/HSS_release.%s >%s/HSS_release.DIFF' % (DIR_DEST,OAM_IP1,DIR_DEST,OAM_IP2,DIR_DEST)
    _DEB('command:%s' % cmd)

    (output,output_err,output_code) = st_command.execute_cmd(cmd, stdout=True, stderr=True)
    if output_code:
        _WRN( 'WARNING: HSS release info is not the same. Check HSS_release.DIFF file to see the differences.')
        compare_OK = False
    else:
        _INF( 'Check HSS release OK ')

    # Comparing Load Modules  info
    _INF( '### Comparing Load Modules  info ')
    cmd = 'sort %s/Load_Modules.%s -o %s/Load_Modules_tmp.%s' % (DIR_DEST,OAM_IP1,DIR_DEST,OAM_IP1)
    (output,output_err,output_code) = st_command.execute_cmd(cmd, stdout=True, stderr=True)
    if output_code:
        _ERR( 'Error when sorting Load Modules file')
        quit_program(st_command.EXECUTION_ERROR)

    cmd = 'sort %s/Load_Modules.%s -o %s/Load_Modules_tmp.%s' % (DIR_DEST,OAM_IP2,DIR_DEST,OAM_IP2)
    (output,output_err,output_code) = st_command.execute_cmd(cmd, stdout=True, stderr=True)
    if output_code:
        _ERR( 'Error when sorting Load Modules file')
        quit_program(st_command.EXECUTION_ERROR)

    cmd = 'diff %s/Load_Modules_tmp.%s %s/Load_Modules_tmp.%s >%s/Load_Modules.DIFF' % (DIR_DEST,OAM_IP1,DIR_DEST,OAM_IP2,DIR_DEST)
    _DEB('command:%s' % cmd)

    (output,output_err,output_code) = st_command.execute_cmd(cmd, stdout=True, stderr=True)
    if output_code:
        _WRN( 'WARNING: Load Modules info is not the same. Check Load_Modules.DIFF file to see the differences.')
        compare_OK = False
    else:
        _INF( 'Check Load Modules OK ')

    # Comparing Size of LM_HssAvgKeyGenerator Modules
    _INF( '### Comparing size of LM_HssAvgKeyGenerator Modules  info ')
    cmd = 'diff %s/HssAvgKeyGenerator_Size.%s %s/HssAvgKeyGenerator_Size.%s >%s/HssAvgKeyGenerator_Size.DIFF' % (DIR_DEST,OAM_IP1,DIR_DEST,OAM_IP2,DIR_DEST)
    _DEB('command:%s' % cmd)

    (output,output_err,output_code) = st_command.execute_cmd(cmd, stdout=True, stderr=True)
    if output_code:
        _WRN( 'WARNING: LM_HssAvgKeyGenerator Modules info is not the same. Check HssAvgKeyGenerator_Size.DIFF file to see the differences.')
        compare_OK = False
    else:
        _INF( 'Check LM_HssAvgKeyGenerator Modules OK ')

    # Comparing Warning-AVG messages
    _INF( '### Comparing Warning-AVG messages in the logs ')
    cmd = 'diff %s/Warning_AVG.%s %s/Warning_AVG.%s >%s/Warning_AVG.DIFF' % (DIR_DEST,OAM_IP1,DIR_DEST,OAM_IP2,DIR_DEST)
    _DEB('command:%s' % cmd)

    (output,output_err,output_code) = st_command.execute_cmd(cmd, stdout=True, stderr=True)
    if output_code:
        _WRN( 'WARNING: Warning-AVG messages info is not the same. Check Warning_AVG.DIFF file to see the differences.')
        compare_OK = False
    else:
        _INF( 'Check Warning-AVG messages info OK ')

    # Comparing SW Inventory  info
    _INF( '### Comparing SW Inventory info ')
    cmd = 'grep "SwVersionMain=" %s/SW_Inventory.%s | grep -v "ManagedElement=" >%s/SW_Inventory_tmp.%s' % (DIR_DEST,OAM_IP1,DIR_DEST,OAM_IP1)
    _DEB('command:%s' % cmd)

    (output,output_err,output_code) = st_command.execute_cmd(cmd, stdout=True, stderr=True)
    if output_code:
        _ERR( 'Error when filtering  SW_Inventory file')
        quit_program(st_command.EXECUTION_ERROR)

    cmd = 'grep "SwVersionMain=" %s/SW_Inventory.%s | grep -v "ManagedElement=" >%s/SW_Inventory_tmp.%s' % (DIR_DEST,OAM_IP2,DIR_DEST,OAM_IP2)
    _DEB('command:%s' % cmd)

    (output,output_err,output_code) = st_command.execute_cmd(cmd, stdout=True, stderr=True)
    if output_code:
        _ERR( 'Error when filtering  SW_Inventory file')
        quit_program(st_command.EXECUTION_ERROR)

    cmd = 'grep CXP %s/SW_Inventory_tmp.%s | cut -d \"=\" -f2 ' % (DIR_DEST,OAM_IP1)
    (sw_inventory_env1,output_err,output_code) = st_command.execute_cmd(cmd, stdout=True, stderr=True)
    if output_code:
        _WRN( 'WARNING: SW Inventory not found in the file %s/SW_Inventory_tmp.%s' % (DIR_DEST,OAM_IP1))

    cmd = 'grep CXP %s/SW_Inventory_tmp.%s | cut -d \"=\" -f2 ' % (DIR_DEST,OAM_IP2)
    (sw_inventory_env2,output_err,output_code) = st_command.execute_cmd(cmd, stdout=True, stderr=True)
    if output_code:
        _WRN( 'WARNING: SW Inventory not found in the file %s/SW_Inventory_tmp.%s' % (DIR_DEST,OAM_IP2))

    check_sw=check_sw_version (sw_inventory_env1,sw_inventory_env2)
    if check_sw == 1:
        _INF( 'Check SW Inventory OK ')
    else:
        _WRN( 'WARNING: SW Inventory info is not the same. Check SW Inventory files to see the differences.')
        compare_OK = False

    # Comparing SW Version  info
    # We have to verify that the SW Version of the maiden installation is one
    # of the several ones that the upgrade environment may have
    _INF( '### Comparing SW Version info ')
    cmd = 'grep CXP %s/SW_Version.%s | cut -d \" \" -f2 ' % (DIR_DEST,OAM_IP1)
    (sw_version_env1,output_err,output_code) = st_command.execute_cmd(cmd, stdout=True, stderr=True)
    sw_version_env1=sw_version_env1.strip()
    if output_code:
        _WRN( 'WARNING: SW Version not found in the file %s/SW_Version.%s' % (DIR_DEST,OAM_IP1))
    n_sw_version_env1 =len(sw_version_env1.split('\n'))

    cmd = 'grep CXP %s/SW_Version.%s | cut -d \" \" -f2 ' % (DIR_DEST,OAM_IP2)
    (sw_version_env2,output_err,output_code) = st_command.execute_cmd(cmd, stdout=True, stderr=True)
    sw_version_env2=sw_version_env2.strip()
    if output_code:
        _WRN( 'WARNING: SW Version not found in the file %s/SW_Version.%s' % (DIR_DEST,OAM_IP2))

    check_sw=check_sw_version (sw_version_env1,sw_version_env2)
    if check_sw == 1:
        _INF( 'Check SW Version OK ')
    else:
        _WRN( 'WARNING: SW Version info is not the same. Check SW Version files to see the differences.')
        compare_OK = False

    # Comparing HSS_FUNCTION  info
    _INF( '### Comparing HSS-FUNCTION configuration ')
    cmd = 'grep -i "enable" %s/HSS_FUNCTION_info.%s | grep -v \"enabled=true\" >%s/HSS_FUNCTION_info_enable.%s' % (DIR_DEST,OAM_IP1,DIR_DEST,OAM_IP1)
    (output,output_err,output_code) = st_command.execute_cmd(cmd, stdout=True, stderr=True)
    if output_code:
        _ERR( 'ERROR when filtering the HSS_FUNCTION info ')

    cmd = 'grep -i "enable" %s/HSS_FUNCTION_info.%s | grep -v \"enabled=true\" >%s/HSS_FUNCTION_info_enable.%s' % (DIR_DEST,OAM_IP2,DIR_DEST,OAM_IP2)
    (output,output_err,output_code) = st_command.execute_cmd(cmd, stdout=True, stderr=True)
    if output_code:
        _ERR( 'ERROR when filtering the HSS_FUNCTION info ')

    cmd = 'diff %s/HSS_FUNCTION_info_enable.%s %s/HSS_FUNCTION_info_enable.%s >%s/HSS_FUNCTION_info_enable.DIFF' % (DIR_DEST,OAM_IP1,DIR_DEST,OAM_IP2,DIR_DEST)
    _DEB('command:%s' % cmd)

    (output,output_err,output_code) = st_command.execute_cmd(cmd, stdout=True, stderr=True)
    if output_code:
        _WRN( 'WARNING: HSS_FUNCTION enabled features are not the same. Check HSS_FUNCTION_info_enable.DIFF file to see the differences')
        compare_OK = False
    else:
        _INF( 'Check HSS_FUNCTION enabled features is OK ')

    # Comparing umask nodes  info
    _INF( '### Comparing UMASK nodes info ')
    cmd = 'grep -E "SC-1|SC-2|PL-3|PL-4" %s/UMASK_nodes.%s | sort >%s/UMASK_nodes_short.%s' % (DIR_DEST,OAM_IP1,DIR_DEST,OAM_IP1)
    _DEB('command:%s' % cmd)
    (output,output_err,output_code) = st_command.execute_cmd(cmd, stdout=True, stderr=True)
    if output_code:
        _ERR( 'ERROR when filtering the UMASK nodes info')

    cmd = 'grep -E "SC-1|SC-2|PL-3|PL-4" %s/UMASK_nodes.%s | sort >%s/UMASK_nodes_short.%s' % (DIR_DEST,OAM_IP2,DIR_DEST,OAM_IP2)
    _DEB('command:%s' % cmd)
    (output,output_err,output_code) = st_command.execute_cmd(cmd, stdout=True, stderr=True)
    if output_code:
        _ERR( 'ERROR when filtering the UMASK nodes info')

    cmd = 'diff %s/UMASK_nodes_short.%s %s/UMASK_nodes_short.%s >%s/UMASK_nodes_short.DIFF' % (DIR_DEST,OAM_IP1,DIR_DEST,OAM_IP2,DIR_DEST)
    _DEB('command:%s' % cmd)
    (output,output_err,output_code) = st_command.execute_cmd(cmd, stdout=True, stderr=True)
    if output_code:
        _WRN( 'WARNING: UMASK info for both environment are not the same. Check UMASK_nodes_short.DIFF file to see the differences')
        compare_OK = False
    else:
        _INF( 'Check UMASK nodes info is OK ')

    return compare_OK


def get_info_hss_env(OAM_IP,USER,PORT,DIR_DEST):
    """ Get the info from the HSS environment to be compared later on """

    # We remove the possible files from previous executions
    cmd = 'rm -rf %s/*.%s' % (DIR_DEST,OAM_IP)
    (output,output_err,output_code) = st_command.execute_cmd(cmd, stdout=True, stderr=True)
    if output_code:
        _ERR( '\n Error when removing previous files ')
        quit_program(st_command.EXECUTION_ERROR)


    # Checking if Authorization is LOCKED
    cba_cmd = 'CBA_check_AandA_enabled --node %s --user %s --port %s' % (OAM_IP,USER,PORT)
    (output,output_err,output_code) = st_command.execute_cmd(cba_cmd, stdout=True, stderr=True)
    if output_code:
        _INF( 'A&A not enabled. Using user root for ECLI commands ')
        user_cliss="root"
    else:
        _INF( 'A&A enabled. Using user hssadministrator for ECLI commands ')
        user_cliss="hssadministrator"

    # "Getting cmw-repository-list info
    _INF( 'Getting cmw-repository-list info ')
    cmd = '\"cmw-repository-list\"'
    cba_cmd = 'CBA_run_command --node %s --user %s --port %s --file %s/cba_repository_list.%s %s' % (OAM_IP,USER,PORT,DIR_DEST,OAM_IP,cmd)
    _DEB('command:%s' % cba_cmd)

    (output,output_err,output_code) = st_command.execute_cmd(cba_cmd, stdout=True, stderr=True)
    if output_code:
        _ERR( '\n Error when getting cmw-repository-list info ')
        quit_program(st_command.EXECUTION_ERROR)

    # "Getting rpms installed info
    _INF( 'Getting rpms installed info ')
    cmd = '\"cluster rpm -l -n 1 | grep -i hss\"'
    cba_cmd = 'CBA_run_command --node %s --user %s --port %s --file %s/rpms_installed_n1.%s %s' % (OAM_IP,USER,PORT,DIR_DEST,OAM_IP,cmd)
    _DEB('command:%s' % cba_cmd)

    (output,output_err,output_code) = st_command.execute_cmd(cba_cmd, stdout=True, stderr=True)
    if output_code:
        _ERR( '\n Error when getting rpms installed info for node 1')
        quit_program(st_command.EXECUTION_ERROR)

    cmd = '\"cluster rpm -l -n 2 | grep -i hss\"'
    cba_cmd = 'CBA_run_command --node %s --user %s --port %s --file %s/rpms_installed_n2.%s %s' % (OAM_IP,USER,PORT,DIR_DEST,OAM_IP,cmd)
    _DEB('command:%s' % cba_cmd)

    (output,output_err,output_code) = st_command.execute_cmd(cba_cmd, stdout=True, stderr=True)
    if output_code:
        _ERR( '\n Error when getting rpms installed info for node 2')
        quit_program(st_command.EXECUTION_ERROR)

    cmd = '\"cluster rpm -l -n 3 | grep -i hss\"'
    cba_cmd = 'CBA_run_command --node %s --user %s --port %s --file %s/rpms_installed_n3.%s %s' % (OAM_IP,USER,PORT,DIR_DEST,OAM_IP,cmd)
    _DEB('command:%s' % cba_cmd)

    (output,output_err,output_code) = st_command.execute_cmd(cba_cmd, stdout=True, stderr=True)
    if output_code:
        _ERR( '\n Error when getting rpms installed info for node 3')
        quit_program(st_command.EXECUTION_ERROR)

    cmd = '\"cluster rpm -l -n 4 | grep -i hss\"'
    cba_cmd = 'CBA_run_command --node %s --user %s --port %s --file %s/rpms_installed_n4.%s %s' % (OAM_IP,USER,PORT,DIR_DEST,OAM_IP,cmd)
    _DEB('command:%s' % cba_cmd)

    (output,output_err,output_code) = st_command.execute_cmd(cba_cmd, stdout=True, stderr=True)
    if output_code:
        _ERR( '\n Error when getting rpms installed info for node 4')
        quit_program(st_command.EXECUTION_ERROR)

    # "Getting HSS_VERSION  info
    _INF( 'Getting HSS_VERSION  and release info ')
    cmd = '\"vdicos-envdata-get HSS_VERSION\"'
    cba_cmd = 'CBA_run_command --node %s --user %s --port %s --file %s/HSS_VERSION.%s %s' % (OAM_IP,USER,PORT,DIR_DEST,OAM_IP,cmd)
    _DEB('command:%s' % cba_cmd)

    (output,output_err,output_code) = st_command.execute_cmd(cba_cmd, stdout=True, stderr=True)
    if output_code:
        _ERR( '\n Error when getting HSS_VERSION info ')
        quit_program(st_command.EXECUTION_ERROR)

    cmd = '\"immlist -a release managedElementId=1\"'
    cba_cmd = 'CBA_run_command --node %s --user %s --port %s --file %s/HSS_release.%s %s' % (OAM_IP,USER,PORT,DIR_DEST,OAM_IP,cmd)
    _DEB('command:%s' % cba_cmd)

    (output,output_err,output_code) = st_command.execute_cmd(cba_cmd, stdout=True, stderr=True)
    if output_code:
        _ERR( '\n Error when getting HSS release info ')
        quit_program(st_command.EXECUTION_ERROR)

    # "Getting Load Modules  info
    _INF( 'Getting Load Modules  info ')
    cmd = '\"clurun.sh list_loadmodules -n PL-3 -d lpmsv.agent.vm0| grep -i HSS\"'
    cba_cmd = 'CBA_run_command --node %s --user %s --port %s --file %s/Load_Modules.%s %s' % (OAM_IP,USER,PORT,DIR_DEST,OAM_IP,cmd)
    _DEB('command:%s' % cba_cmd)

    (output,output_err,output_code) = st_command.execute_cmd(cba_cmd, stdout=True, stderr=True)
    if output_code:
        _ERR( '\n Error when getting Load Modules info ')
        quit_program(st_command.EXECUTION_ERROR)

    # "Getting Size of LM_HssAvgKeyGenerator Modules
    _INF( 'Getting size of LM_HssAvgKeyGenerator Modules  info ')
    cmd = '\"ssh PL-3 du -h /opt/lpmsv/codearchive/LM_HssAvgKeyGenerator*\"'
    cba_cmd = 'CBA_run_command --node %s --user %s --port %s --file %s/HssAvgKeyGenerator_Size.%s %s' % (OAM_IP,USER,PORT,DIR_DEST,OAM_IP,cmd)
    _DEB('command:%s' % cba_cmd)

    (output,output_err,output_code) = st_command.execute_cmd(cba_cmd, stdout=True, stderr=True)
    if output_code:
        _ERR( '\n Error when getting size of LM_HssAvgKeyGenerator Modules info ')
        quit_program(st_command.EXECUTION_ERROR)

    # "Getting umask for all the nodes
    _INF( 'Getting umask nodes info ')
    cba_cmd = 'CBA_check_umask --node %s --user %s --port %s >%s/UMASK_nodes.%s' % (OAM_IP,USER,PORT,DIR_DEST,OAM_IP)
    _DEB('command:%s' % cba_cmd)

    (output,output_err,output_code) = st_command.execute_cmd(cba_cmd, stdout=True, stderr=True)
    if output_code:
        _ERR( '\n Error when getting umask info for nodes')
        quit_program(st_command.EXECUTION_ERROR)


    # "Getting Warning-AVG messages
    _INF( 'Checking Warning-AVG messages in the logs. It may take several minutes ... ')
    cmd = '\"grep -iR Warning-AVG /cluster/storage/no-backup/cdclsv/log/* \"'
    cba_cmd = 'CBA_run_command --node %s --user %s --port %s --file %s/Warning_AVG.%s %s -t 900' % (OAM_IP,USER,PORT,DIR_DEST,OAM_IP,cmd)
    _DEB( 'command:%s' % cba_cmd)

    (output,output_err,output_code) = st_command.execute_cmd(cba_cmd, stdout=True, stderr=True)
    if output_code:
        _ERR( '\n Error when checking Warning-AVG messages')
        quit_program(st_command.EXECUTION_ERROR)

    # "Getting SW Inventory  info
    _INF( 'Getting SW Inventory info ')
    cmd = '\"show ManagedElement=1,SystemFunctions=1,SwM=1\"'
    cba_cmd = 'CBA_run_cliss_command --node %s --user %s --port %s --cliss_user %s --file %s/SW_Inventory.%s %s' % (OAM_IP,USER,PORT,user_cliss,DIR_DEST,OAM_IP,cmd)
    _DEB( 'command:%s' % cba_cmd)

    (output,output_err,output_code) = st_command.execute_cmd(cba_cmd, stdout=True, stderr=True)
    if output_code:
        _ERR( '\n Error when getting SW Inventory info. Code:\n%' % str(output_code))
        _INF( '%s' % output_err)
        quit_program(st_command.EXECUTION_ERROR)

    # "Getting SW Version  info
    _INF( 'Getting SW Version info ')
    cmd = '\"show-table ManagedElement=1,SystemFunctions=1,SwInventory=1 -m SwVersion -p swVersionId\"'
    cba_cmd = 'CBA_run_cliss_command --node %s --user %s --port %s --cliss_user %s --file %s/SW_Version.%s %s' % (OAM_IP,USER,PORT,user_cliss,DIR_DEST,OAM_IP,cmd)
    _DEB( 'command:%s' % cba_cmd)
    (output,output_err,output_code) = st_command.execute_cmd(cba_cmd, stdout=True, stderr=True)
    if output_code:
        _ERR( '\n Error when getting SW Version info. Code:' + str(output_code))
        _INF( '%s' % output_err)
        quit_program(st_command.EXECUTION_ERROR)

    # "Getting HSS Function configuration info
    _INF( 'Getting HSS Function info ')
    cmd = '\"show -r -v ManagedElement=1,HSS-Function=HSS_FUNCTION \"'
    cba_cmd = 'CBA_run_cliss_command --node %s --user %s --port %s --cliss_user %s --file %s/HSS_FUNCTION_info.%s %s' % (OAM_IP,USER,PORT,user_cliss,DIR_DEST,OAM_IP,cmd)
    _DEB( 'command:%s' % cba_cmd)
    (output,output_err,output_code) = st_command.execute_cmd(cba_cmd, stdout=True, stderr=True)
    if output_code:
        _ERR( '\n Error when getting HSS FUNCTION info. Code:' + str(output_code))
        _INF( '%s' % output_err)
        quit_program(st_command.EXECUTION_ERROR)


def parse_commandline():
    global CWD

    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawTextHelpFormatter,
        description=textwrap.dedent('''
        Script to compare the configuration between 2 HSS environments, usually one with a maiden
        installation and the other upgraded.

        '''),
        epilog=textwrap.dedent(st_command.get_exit_status()))

    scenario_params = parser.add_argument_group('Parameters ')
    scenario_params.add_argument('--info-file1',
                        action='store', default=None,
                        help='''Compressed file with the config info of the first environment to compare. Optional.''',
                        dest='env_file1')

    scenario_params.add_argument('--info-file2',
                        action='store', default=None,
                        help='''Compressed file with the config info of the second environment to compare. Optional.''',
                        dest='env_file2')

    scenario_params.add_argument('--node1',
                        action='store', default=None,
                        help='''IP address of the first environment to compare. Ignored if info-file1 parameter defined.''',
                        dest='NODE1')

    scenario_params.add_argument('--port1',
                      action='store', default=22,
                      help='Port used in ssh to get connected to the first environment. Default value is 22',
                      dest='port1')

    scenario_params.add_argument('--user1',
                      action='store', default='com-emergency',
                      help='User used in ssh to get connected to the first environment. Default value is "com-emergency"',
                      dest='user1')

    scenario_params.add_argument('--node2',
                        action='store', default=None,
                        help='''IP address of the second environment to compare. Ignored if info-file2 parameter defined.''',
                        dest='NODE2')

    scenario_params.add_argument('--port2',
                      action='store', default=22,
                      help='Port used in ssh to get connected to the second environment. Default value is 22',
                      dest='port2')

    scenario_params.add_argument('--user2',
                      action='store', default='com-emergency',
                      help='User used in ssh to get connected to the first environment. Default value is "com-emergency"',
                      dest='user2')

    scenario_params.add_argument('-o', '--output_dir',
                        action='store', default=None, dest='DIR_DEST',
                        help='Optional. Output directory with the full path. By default, the current working directory.')

    logging=e3utils.log.add_logging_options(parser)
    args = parser.parse_args()

    e3utils.log.CONSOLE_PREFIX='(HSS_CompareConfigEnv%s.log)' % os.getpid()
    e3utils.log.setup_logging_options(args)

    if args.log_file is None:
        e3utils.log.add_file_logging(os.path.join(CWD, 'HSS_CompareConfigEnv%s.log' % os.getpid()),
                                     level=e3utils.log.DEBUG)

    with open(os.path.realpath(__file__), 'r') as myself:
        if sys.version_info[0] == 2:
            _DEB('** Binary MD5: %s' % hashlib.md5(myself.read()).hexdigest())
        else:
            _DEB('** Binary MD5: %s' % hashlib.md5(str.encode(myself.read())).hexdigest())
    _DEB('** Commandline: "%s"' % ' '.join(sys.argv))

    return (args)




def main ():

    global env1_name
    global env2_name
    args = parse_commandline()

    try:
        if (args.DIR_DEST is None):
            args.DIR_DEST= "."
            _INF( ' Config info files will be saved under current directory')
        else:
            _INF( ' Config info files will be saved under directory %s' % args.DIR_DEST)


        if args.env_file1 is not None:
            args.NODE1 = decompress_config_info_file(args.env_file1,args.DIR_DEST)
            env1_name = 'HSS_%s' %args.NODE1
        else:
            env1_name=get_name_environment(args.NODE1,args.user1,args.port1)
            if (env1_name == "ERROR"):
                _ERR( ' Problems to get the name of the environment with the IP %s' % args.NODE1)
                quit_program(st_command.EXECUTION_ERROR)

            _INF( ' *** Collecting info from environment %s ' % env1_name)
            get_info_hss_env(args.NODE1,args.user1,args.port1,args.DIR_DEST)

        if args.env_file2 is not None:
            args.NODE2 = decompress_config_info_file(args.env_file2,args.DIR_DEST)
            env2_name = 'HSS_%s' %args.NODE2
        else:
            env2_name=get_name_environment(args.NODE2,args.user2,args.port2)
            if (env2_name == "ERROR"):
                error_info = 'Problems to get the name of the environment with the IP %s' % args.NODE2
                _ERR(error_info)
                raise st_command.CommandFailure(error_info)

            _INF( ' *** Collecting info from environment %s ' % env2_name)
            get_info_hss_env(args.NODE2,args.user2,args.port2,args.DIR_DEST)


        _INF( ' *** Comparing info obtained from both environments ')
        compare_OK = compare_info_hss_env(args.NODE1,args.NODE2,args.DIR_DEST)
        if not compare_OK:
            error_info = 'Configuration differences detected. Check DIFF files generated'
            raise st_command.CommandFailure(error_info)

    except IOError as e:
        error_info = 'Error: %s' % str(e)
        _ERR(error_info)
        quit_program(st_command.EXECUTION_ERROR, error_info)

    except connection.Unauthorized as e:
        error_info = 'Error: %s' % str(e)
        _ERR(error_info)
        quit_program(st_command.AUTHENTICATION_ERROR, error_info)

    except (connection.ConnectionTimeout, connection.ConnectionFailed) as e:
        error_info = 'Error: %s' % str(e)
        _ERR(error_info)
        quit_program(st_command.CONNECTION_ERROR, error_info)

    except (connection.ConnectionFailedTimeout ,connection.ConnectionFailedEOF) as e:
        error_info = 'Error: %s' % str(e)
        _ERR(error_info)
        quit_program(st_command.CONNECTION_ERROR, error_info)

    except (st_command.WrongParameter) as e:
        _ERR('Error: %s' % str(e))
        quit_program(st_command.WRONG_PARAMETER, str(e))

    except st_command.CommandFailure as e:
        _ERR('Error: %s' % str(e))
        quit_program(st_command.EXECUTION_ERROR,str(e))

    except test_cases.ClissError as e:
        error_info = '%s' % str(e)
        _ERR(error_info)
        quit_program(st_command.EXECUTION_ERROR,error_info.split('\n')[0])

    quit_program(st_command.SUCCESS)


if __name__ == '__main__':
    CWD = os.getcwd()
    signal.signal(signal.SIGINT, quit_gracefully)
    try:
        main()
    except KeyboardInterrupt:
        _ERR('Unhandled Ctr-C, please report this LOG to tools team')
        _DEB('** STACK TRACE **')
        exc_type, exc_value, exc_traceback = sys.exc_info()
        for tb in traceback.format_tb(exc_traceback):
            _DEB(tb)
        quit_program(50)

    except Exception as e:
        _ERR('Unhandled Exception, please report this LOG to tools team')
        _ERR('Additional information: %s' % str(e))
        _ERR('** STACK TRACE **')
        exc_type, exc_value, exc_traceback = sys.exc_info()
        for tb in traceback.format_tb(exc_traceback):
            _ERR(tb)
        for tb in traceback.format_exception(exc_type, exc_value, exc_traceback):
            _ERR(tb)
        quit_program(st_command.IMPLEMENTATION_ERROR)

    quit_program(0)

