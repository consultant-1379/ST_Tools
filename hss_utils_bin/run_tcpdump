#!/usr/bin/env python
#

import sys
import os
CWD = os.getcwd()
import os.path
import time
import shutil
import hashlib
import tempfile
import socket
import traceback
import argparse
import re

import ntpath
import signal
import textwrap
import socket
import getpass

import hss_utils
import hss_utils.st_command as st_command
import hss_utils.connection as connection
import hss_utils.node
import hss_utils.node.gentraf

import e3utils.log
_INF = e3utils.log.info
_DEB = e3utils.log.debug
_ERR = e3utils.log.error
_WRN = e3utils.log.warning

USERID = getpass.getuser()
def set_userid(userid):
    global USERID
    USERID = userid

HOSTNAME = socket.gethostname()
def set_hostname(hostname):
    global HOSTNAME
    HOSTNAME = hostname

def quit_gracefully(*args):
    raise KeyboardInterrupt, "Signal handler"


WIRESHARK="/usr/bin/dumpcap"

MYCHOWN="/tsp/tcm_env/scripts/mychown"
MYCHOWN_EXEC="sudo %s" % MYCHOWN

EXIT_ERRORS =  {
0: 'Success',
1: 'Not found / do not exist',
2: 'Execution error',
3: 'Execution Timeout',
4: 'Connection error',
5: 'Authentication error',
10: 'Wrong parameter value',
20: 'Command not supported',
100: 'Implementation error'
    }

# Exit status
EXIT_CODE = 0
SUCCESS = 0
NOT_FOUND = 1
EXECUTION_ERROR = 2
TIMEOUT = 3
CONNECTION_ERROR = 4
AUTHENTICATION_ERROR = 5
WRONG_PARAMETER = 10
NOT_SUPPORTED = 20
IMPLEMENTATION_ERROR = 100

def get_exit_status():
    exit_status = '''\
    EXIT STATUS
'''
    for key in sorted(EXIT_ERRORS):
        exit_status += '\t%s\t%s\n' % (key, EXIT_ERRORS[key])

    return exit_status

NODE=None

def quit_program(exit_code):
    global NODE

    if NODE is not None:
        NODE.release()

    _DEB('Exit code: %s (%s)' % (exit_code, EXIT_ERRORS.get(exit_code, 'unknown error code')))
    sys.exit(exit_code)

def main():

    global NODE
    user_config = parse_commandline()

    connections = {}
    file_to_dowload = []
    config = {'host':HOSTNAME, 'port':user_config.port,'user' : USERID}

    if user_config.password is not None:
        config.update({'password' : user_config.password})

    try:
        if st_command.get_ip(HOSTNAME) is None:
            _ERR('Node value %s is not valid' % HOSTNAME)
            quit_program(st_command.WRONG_PARAMETER)

        NODE = hss_utils.node.gentraf.GenTraf(config, allow_x11_forwarding = True)
        if not NODE.file_exist(WIRESHARK):
            _ERR('Required %s not installed in %s' % (WIRESHARK, HOSTNAME))
            quit_program(NOT_SUPPORTED)

        cmd = '%s -i any -c 1 -w /dev/null' % WIRESHARK
        _INF('Executing: %s' % cmd)
        SUDO = 'sudo'
        answer = NODE.run_command(cmd,full_answer=True)
        if 'Packets captured: 1' in answer:
            _INF('sudo prefix command not needed')
            SUDO = ''

        if SUDO and not NODE.file_exist(MYCHOWN):
            _ERR('Required %s not installed in %s' % (MYCHOWN, HOSTNAME))
            quit_program(NOT_SUPPORTED)

        interfaces = []
        if 'any' in user_config.interface:
            interfaces.append('any')
        else:
            allowed_interfaces = NODE.interfaces
            for interface in user_config.interface:
                if NODE.is_interface_allowed(interface) == False:
                    _ERR('Network Interface %s not valid. Allowed values are: %s' % (interface, ' '.join(allowed_interfaces)))
                    quit_program(WRONG_PARAMETER)

            interfaces = user_config.interface

        for  interface in interfaces:

            NODE.extend_connection(interface)
            pcap_file = '/tmp/%s_%s_%s.pcap' % (HOSTNAME, interface , os.getpid())
            cmd = '%s %s -n -i %s -w %s' % (SUDO,WIRESHARK, interface, pcap_file)
            if user_config.eth_filter is not None:
                cmd += ' -f "%s"' % user_config.eth_filter
            _INF('Executing: %s' % cmd)
            NODE.run_command_async(cmd, interface, answer={'Capturing on \'%s\'' %  interface: '\n'}) 
            file_to_dowload.append(pcap_file) 

    except connection.Unauthorized, e: 
        _ERR('Error: %s' % str(e))
        quit_program(AUTHENTICATION_ERROR)

    except (connection.ConnectionTimeout, connection.ConnectionFailed), e: 
        _ERR('Error: %s' % str(e))
        quit_program(CONNECTION_ERROR)

    except Exception, e: 
        _ERR('Error: %s' % str(e))
        quit_program(EXECUTION_ERROR)


    try:
        if user_config.capture_time is None:
            _DEB('Capturing......Press ctrl-c to stop')
            print '\n\nCapturing......Press ctrl-c to stop'
            signal.pause()
        else:
            _DEB('Capture will take %s seconds. Press ctrl-c to stop' % user_config.capture_time)
            print '\n\nCapture will take %s seconds. Press ctrl-c to stop' % user_config.capture_time
            time.sleep(float(user_config.capture_time))

    except KeyboardInterrupt:
        _DEB('Capture stopped by user!')
        print '\n Capture stopped by user!'


    for  interface in interfaces:
        output = NODE.stop_command_async(interface)

        for line in output.split('\r\n'):
            if 'Packets received/dropped on interface' in line:
                _INF('%s' % line)

#    time.sleep(float(5))

    try:
        for pcap in file_to_dowload:
            if SUDO:
                cmd = '%s %s %s' % (MYCHOWN_EXEC, USERID, pcap)
                _INF('Executing: %s' % cmd)
                NODE.run_command(cmd)
            _INF('Executing: download of %s' % pcap)
            NODE.download(pcap, CWD, timeout = user_config.max_time)
            cmd = 'rm  %s' % pcap
            _INF('Executing: %s' % cmd)
            NODE.run_command(cmd)

    except IOError, e:
        _ERR('Error copying /tmp/*_%s.pcap : %s' % (os.getpid(), str(e)))
        quit_program(EXECUTION_ERROR)

    except (connection.ConnectionTimeout, connection.ConnectionFailed), e: 
        _ERR('Error copying /tmp/*_%s.pcap : %s' % (os.getpid(), str(e)))
        quit_program(CONNECTION_ERROR)


    cmd = 'ls -ls *_%s.pcap' % os.getpid()
    _INF('Executing: %s' % cmd)
    list_of_files, error_code = st_command.execute_cmd(cmd) 
    list_of_files = list_of_files.split('\n')

    file_to_merge = ''
    empty_file = ''
    for line in list_of_files:
        if len(line) > 0:
            searchObj = re.search(r'%s.*_%s\.pcap' % (HOSTNAME, os.getpid()),line)
            if searchObj:
                if int(line.split()[0]) != 0:
                    file_to_merge += '%s ' % searchObj.group()
                else:
                    empty_file += '%s ' % searchObj.group()

    if len(empty_file):
        _WRN('Empty pcap file: %s' % empty_file)
        cmd = 'rm %s' % empty_file
        _INF('Executing: %s' % cmd)
        os.system(cmd)

    if len(file_to_merge):
        cmd = 'mergecap -w %s %s' % (user_config.output_file , file_to_merge)
        _INF('Executing: %s' % cmd)
        os.system(cmd)
        cmd = 'rm %s' % file_to_merge
        _INF('Executing: %s' % cmd)
        os.system(cmd)        
    else:
        _WRN('All the pcap files are empty')

    quit_program(SUCCESS)

def parse_commandline():

    parser = argparse.ArgumentParser(
                        formatter_class=argparse.RawDescriptionHelpFormatter,
                        description='''Get a network capture on a Traffic generator (linux).

           The following software shall be installed:
                %s
                %s''' % (WIRESHARK, MYCHOWN),
                        epilog=textwrap.dedent(get_exit_status())
    )

    access_params = parser.add_argument_group('Access options')
    access_params.add_argument('--host',
                        default=HOSTNAME, action='store', dest='host',
                        help='Hostaname or IP address of the traffic generator. Default: local host %(default)s')

    access_params.add_argument('--port',
                      action='store', default=22,
                      help='Port used in ssh. Default value is 22',
                      dest='port')

    access_params.add_argument('--user',
                      action='store', default=USERID,
                      help='User for ssh. Default: User connected right now %(default)s',
                      dest='user')

    access_params.add_argument('--password',
                      action='store', default=None,
                      help='Password used in ssh. Not used by default',
                      dest='password')

    scenario_params = parser.add_argument_group('Program behaviour options')
    scenario_params.add_argument('-i', '--interface', nargs='+',
                        default='any', action='store', dest='interface',
                        help='List of Network interface names. Default: %(default)s')

    scenario_params.add_argument('-t', '--time',
                        default=None, action='store', dest='capture_time',
                        help='Duration of the capture in sec')

    scenario_params.add_argument('-f', '--filter',
                        default=None, action='store', dest='eth_filter',
                        help='packet filter in libpcap filter syntax. It must be quotted')

    scenario_params.add_argument('-o', '--output',
                        default=os.path.join(CWD, 'dump_%s_%s.pcap' % (os.getpid(),HOSTNAME))    , action='store', dest='output_file',
                        help='Output network capture file name. Default: %(default)s')

    scenario_params.add_argument('--max-time',
                        default=None, action='store', dest='max_time',
                        help='Max time waiting for dowloading pcap files. Default: No max timer is used')

    logging=e3utils.log.add_logging_options(parser)

    args = parser.parse_args()

    e3utils.log.CONSOLE_PREFIX='(run_tcpdump_%s.log)' % os.getpid()
    e3utils.log.setup_logging_options(args)

    e3utils.log.add_file_logging(os.path.join(CWD, 'run_tcpdump_%s.log' % os.getpid()),
                                    level=e3utils.log.DEBUG)

    with open(os.path.realpath(__file__), 'r') as myself:
        _DEB('** Binary MD5: %s' % hashlib.md5(myself.read()).hexdigest())
    _DEB('** Commandline: "%s"' % ' '.join(sys.argv))


    try:
        if args.output_file != os.path.join(CWD, 'dump_%s_%s.pcap' % (os.getpid(),HOSTNAME)):
            log_dir = os.path.dirname(args.output_file)
            if log_dir != '':
                if not os.path.exists(log_dir):
                    os.makedirs(log_dir)
    except Exception, e:
        _DEB('Exception: %s' % str(e))
        _ERR('output file value %s is not valid' % args.output_file)

    set_hostname(args.host)
    set_userid(args.user)

    return (args)



if __name__ == '__main__':
    signal.signal(signal.SIGINT, quit_gracefully)
    try:
        main()
    except KeyboardInterrupt:
        _ERR('Unhandled Ctr-C, please report this LOG to tools team')
        _DEB('** STACK TRACE **')
        exc_type, exc_value, exc_traceback = sys.exc_info()
        for tb in traceback.format_tb(exc_traceback):
            _DEB(tb)
        quit_program(50)
    except Exception, e:
        _ERR('Unhandled Exception, please report this LOG to tools team')
        _DEB('Additional information: %s' % str(e))
        _DEB('** STACK TRACE **')
        exc_type, exc_value, exc_traceback = sys.exc_info()
        for tb in traceback.format_tb(exc_traceback):
            _DEB(tb)
        for tb in traceback.format_exception(exc_type, exc_value, exc_traceback):
            _DEB(tb)
        quit_program(IMPLEMENTATION_ERROR)

    quit_program(0)



