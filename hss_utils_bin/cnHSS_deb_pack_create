#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import errno
import sys
import copy
import hashlib
import argparse
import textwrap
import string
import traceback
import getpass
import tempfile
import shutil


import e3utils.log
_INF = e3utils.log.info
_DEB = e3utils.log.debug
_ERR = e3utils.log.error
_WRN = e3utils.log.warning


CWD = os.getcwd()
import hss_utils.st_command as st_command
import hss_utils.node.gentraf
import hss_utils.connection as connection

DIRPATH=None

EXIT_ERRORS =  {
0: 'Success',
1: 'Not found / do not exist',
2: 'Execution error',
3: 'Execution Timeout',
4: 'Connection error',
5: 'Authentication error',
10: 'Wrong parameter value',
20: 'Command not supported',
100: 'Implementation error'
    }

# Exit status
SUCCESS = 0
NOT_FOUND = 1
EXECUTION_ERROR = 2
TIMEOUT = 3
CONNECTION_ERROR = 4
AUTHENTICATION_ERROR = 5
WRONG_PARAMETER = 10
NOT_SUPPORTED = 20
IMPLEMENTATION_ERROR = 100


def get_exit_status():
    exit_status = '''\
    EXIT STATUS
'''
    for key in sorted(EXIT_ERRORS):
        exit_status += '\t%s\t%s\n' % (key, EXIT_ERRORS[key])

    return exit_status
def quit_program(exit_code):
    if DIRPATH:
        _INF('removing %s' % DIRPATH)
        shutil.rmtree(DIRPATH)

    _DEB('Exit code: %s (%s)' % (exit_code, EXIT_ERRORS.get(exit_code, 'unknown error code')))
    sys.exit(exit_code)


def parse_commandline():
    parser = argparse.ArgumentParser(
                        formatter_class=argparse.RawTextHelpFormatter,
                        description=textwrap.dedent('''\
                            Create an HSS ST debian package. 
                            '''),
            epilog=textwrap.dedent(get_exit_status()))

    parser.add_argument('DATA',
                        help='Full path of source folder ')

    parser.add_argument('--skip-clean', action='store_true', default=False,
                        help='Do not execute make clean',
                        dest='nc')

    logging=e3utils.log.add_logging_options(parser)

    args = parser.parse_args()

    e3utils.log.CONSOLE_PREFIX='(cnHSS_deb_pack_create_%s.log)' % os.getpid()
    e3utils.log.setup_logging_options(args)

    if args.log_file is None:
        e3utils.log.add_file_logging(os.path.join(CWD, 'cnHSS_deb_pack_create_%s.log' % os.getpid()),
                                     level=e3utils.log.DEBUG)

    with open(os.path.realpath(__file__), 'r') as myself:
        _DEB('** Binary MD5: %s' % hashlib.md5(myself.read()).hexdigest())
    _DEB('** Commandline: "%s"' % ' '.join(sys.argv))


    return args

def main():
    global DIRPATH
    options = parse_commandline()
    DIRPATH = tempfile.mkdtemp()

    cmd = 'cp -r -p %s %s' % (options.DATA,DIRPATH)
    _INF('Executing "%s"' % cmd)
    stdout, stderr, returncode = st_command.execute_cmd(cmd ,stderr = True)
    if returncode:
        _ERR('Error Executing "%s" : %s' % (cmd,stderr))
        quit_program(EXECUTION_ERROR)

    target = os.path.basename(os.path.normpath(options.DATA))

    cmd = 'fakeroot dpkg-buildpackage -b -d -us -uc %s' % ( '-nc' if options.nc else '')
    _INF('Executing "%s"' % cmd)
    stdout, stderr, returncode = st_command.execute_cmd(cmd ,stderr = True, cwd=os.path.join(DIRPATH,target))
    if returncode:
        _ERR('Error Executing "%s" : %s' % (cmd,stderr))
        quit_program(EXECUTION_ERROR)

    for line in stdout.splitlines():
        _INF(line.strip())

    cmd = 'mv %s .' % (os.path.join(DIRPATH,'*.deb'))
    _INF('Executing "%s"' % cmd)
    stdout, stderr, returncode = st_command.execute_cmd(cmd ,stderr = True)
    if returncode:
        _ERR('Error Executing "%s" : %s' % (cmd,stderr))
        quit_program(EXECUTION_ERROR)

    quit_program(SUCCESS)

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print('Unhandled Ctr-C, please report this LOG to tools team')
        print('** STACK TRACE **')
        exc_type, exc_value, exc_traceback = sys.exc_info()
        for tb in traceback.format_tb(exc_traceback):
            print(tb)
        quit_program(-1)
    except Exception as e:
        print('Unhandled Exception, please report this LOG to tools team')
        print('Additional information: %s' % str(e))
        print('** STACK TRACE **')
        exc_type, exc_value, exc_traceback = sys.exc_info()
        for tb in traceback.format_tb(exc_traceback):
            print(tb)
        for tb in traceback.format_exception(exc_type, exc_value, exc_traceback):
            print(tb)
        quit_program(-1)

    quit_program(0)

