#!/usr/bin/env python
#

import sys
import os
CWD = os.getcwd()
import os.path
import time
import shutil
import hashlib
import tempfile
import pexpect
import socket
HOSTNAME = socket.gethostname()
import traceback
import argparse
import re
import copy
import json

import ntpath
import signal
import textwrap
from datetime import datetime

import hss_utils.st_command as st_command
import hss_utils.connection as connection
import hss_utils.node
import hss_utils.node.cba
import HSS_rtc_lib.components.test_cases as test_cases

def quit_gracefully(*args):
    raise KeyboardInterrupt, "Signal handler"

import e3utils.log
_INF = e3utils.log.info
_DEB = e3utils.log.debug
_ERR = e3utils.log.error
_WRN = e3utils.log.warning

try:
    import hss_utils.rosetta
    import hss_utils.rosetta.services
    _ROSETTA_AVAILABLE_ = True
except ImportError, e:
    _WRN('Cannot import hss_utils.rosetta: %s' % e)
    _WRN('Rosetta access will be disabled')
    _ROSETTA_AVAILABLE_ = False

NODE=None
def quit_program(exit_code,message=''):
    if NODE:
        NODE.release()

    if message != '':
        _INF('stTool_message %s ' % message)

    _DEB('Exit code: %s (%s)' % (exit_code, st_command.EXIT_ERRORS.get(exit_code, 'unknown error code')))
    sys.exit(exit_code)




def main():
    global NODE
    user_config = parse_commandline()
    access_config = {'host':user_config.NODE,
                        'port':user_config.port,
                        'user':user_config.user}

    try:

        NODE = hss_utils.node.cba.Cba(config = access_config)
        try:
            with open(user_config.DATA) as json_data:
                data = json.load(json_data)
        except Exception, e:
            error_info = 'Error parsing json %s file: %s' % (user_config.DATA, str(e))
            _ERR(error_info)
            quit_program(st_command.EXECUTION_ERROR,error_info)


        base_line_found = False
        for release in data:
            try:
                if release['release_base'] == user_config.hss_version:
                    base_line_found = True
                    continue
            except KeyError:
                release['release_base'] = 'Unknown'
                base_line_found = True

            if base_line_found:
                _INF('Updating configuration parameters to %s' % release['release_base'])

                for change in release['changes']:
                    try:
                        for condition in change['conditions']:
                            cliss_connection = test_cases.clissConnection(NODE,
                                                        condition['user'])
                            for element in condition['data']:
                                _INF('Checking conditions  %s = %s' %(element['name'],element['value']))
                                value = cliss_connection.search(condition['clissDn'],element['name'])
                                if value[0] != element['value']:
                                    raise test_cases.ClissConditionCheckFailed('%s != %s' %(element['name'],
                                                                                            element['value']))
                                _INF('OK')
                    except KeyError:
                        _INF('Not conditions for %s changes' % release['release_base'])
                        pass

                    except test_cases.ClissConditionCheckFailed, e:
                        _INF('Skip parameters update due to %s' % str(e))
                        continue

                    cliss_connection = test_cases.clissConnection(NODE,
                                                change['user'])

                    cliss_connection.update_parameters(change['parameters'])

        if user_config.backup is not None:
            cmd = 'run_command_node CBA_create_backup --node %s --user %s --port %s %s -v' % (user_config.NODE, user_config.user, user_config.port, user_config.backup)
            _INF('Executing cmd: %s' % cmd)
            stdout, stderr, returncode = st_command.execute_cmd('%s' % cmd ,stderr = True)
            if returncode:
                error_info = st_command.get_stFramework_error_message(stderr)
                _ERR(error_info)
                quit_program(st_command.EXECUTION_ERROR,error_info)

            _INF('cmd "%s" execution SUCCESS.' % cmd)
            _INF('%s' % stdout.strip())

    except connection.Unauthorized, e: 
        error_info = 'Error: %s' % str(e)
        _ERR(error_info)
        quit_program(st_command.AUTHENTICATION_ERROR, error_info)

    except (connection.ConnectionTimeout, connection.ConnectionFailed), e: 
        error_info = 'Error: %s' % str(e)
        _ERR(error_info)
        quit_program(st_command.CONNECTION_ERROR, error_info)

    except (connection.ConnectionFailedTimeout ,connection.ConnectionFailedEOF), e: 
        error_info = 'Error: %s' % str(e)
        _ERR(error_info)
        quit_program(st_command.CONNECTION_ERROR, error_info)

    except test_cases.ClissError, e:
        error_info = '%s' % str(e)
        _ERR(error_info)
        quit_program(st_command.EXECUTION_ERROR,error_info.split('\n')[0])

    except KeyboardInterrupt:
        _INF('Execution stopped by user!')

    quit_program(st_command.SUCCESS)

def parse_commandline():

    parser = argparse.ArgumentParser(
                        formatter_class=argparse.RawDescriptionHelpFormatter,
                        description='Upgrade HSS in a CBA platform',
                        epilog=textwrap.dedent(st_command.get_exit_status())
    )

    access_params = parser.add_argument_group('Access options')
    access_params.add_argument('-n','--node',
                        action='store', default=None,
                        help='OAM  IP address of the node. If ommitted local hostname will be used to find env in rosetta',
                        dest='NODE')

    access_params.add_argument('--port',
                      action='store', default=22,
                      help='Port used in ssh.  Default value is 22',
                      dest='port')

    access_params.add_argument('--user',
                      action='store', default='com-emergency',
                      help='User for ssh.  Default value is "com-emergency"',
                      dest='user')


    scenario_params = parser.add_argument_group('Define scenario ')
    scenario_params.add_argument('DATA',
                                 help='Data json file node configuration changes')

    scenario_params.add_argument('--hss_version',
                      action='store', default=None,
                      help='HSS version used for incremental configuration update',
                      dest='hss_version')

    scenario_params.add_argument('-b',
                      action='store', default=None,
                      help='Backupname to be created after updating the population',
                      dest='backup')

    logging=e3utils.log.add_logging_options(parser)

    args = parser.parse_args()

    e3utils.log.CONSOLE_PREFIX='(CBA_update_node_configuration_%s.log)' % os.getpid()
    e3utils.log.setup_logging_options(args)

    if args.log_file is None:
        e3utils.log.add_file_logging(os.path.join(CWD, 'CBA_update_node_configuration_%s.log' % os.getpid()),
                                     level=e3utils.log.DEBUG)

    with open(os.path.realpath(__file__), 'r') as myself:
        _DEB('** Binary MD5: %s' % hashlib.md5(myself.read()).hexdigest())
    _DEB('** Commandline: "%s"' % ' '.join(sys.argv))


    if args.NODE is None:
        _INF('Using rosetta for getting enviroment info')
        try:
            env, config = hss_utils.rosetta.services.get_env_for_localhost()
            _INF('Environment  : %s' % env)
            args.NODE = config.get_cabinet_oam_vip(cabinet=0)
            _INF('Node         :%s' % args.NODE)

        except (hss_utils.rosetta.ObjectNotFound, hss_utils.rosetta.RosettaUnavailable), e:
            error_info = 'Error: %s. Use command line parameter --node' % str(e)
            _ERR(error_info)
            quit_program(st_command.ROSETTA_ERROR, error_info)

    return (args)



if __name__ == '__main__':
    signal.signal(signal.SIGINT, quit_gracefully)
    try:
        main()
    except KeyboardInterrupt:
        _ERR('Unhandled Ctr-C, please report this LOG to tools team')
        _DEB('** STACK TRACE **')
        exc_type, exc_value, exc_traceback = sys.exc_info()
        for tb in traceback.format_tb(exc_traceback):
            _DEB(tb)
        quit_program(50)
    except Exception, e:
        _ERR('Unhandled Exception, please report this LOG to tools team')
        _ERR('Additional information: %s' % str(e))
        _ERR('** STACK TRACE **')
        exc_type, exc_value, exc_traceback = sys.exc_info()
        for tb in traceback.format_tb(exc_traceback):
            _ERR(tb)
        for tb in traceback.format_exception(exc_type, exc_value, exc_traceback):
            _ERR(tb)
        quit_program(st_command.IMPLEMENTATION_ERROR)

    quit_program(0)



