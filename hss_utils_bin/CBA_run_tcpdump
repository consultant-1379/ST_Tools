#!/usr/bin/env python
#

import sys
import os
CWD = os.getcwd()
import os.path
import time
import shutil
import hashlib
import tempfile
import socket
HOSTNAME = socket.gethostname()
import traceback
import argparse
import re
import copy

import ntpath
import signal
import textwrap

import hss_utils.st_command as st_command
import hss_utils.connection as connection
import hss_utils.node
import hss_utils.node.cba

def quit_gracefully(*args):
    raise KeyboardInterrupt, "Signal handler"

import e3utils.log
_INF = e3utils.log.info
_DEB = e3utils.log.debug
_ERR = e3utils.log.error
_WRN = e3utils.log.warning

try:
    import hss_utils.rosetta
    import hss_utils.rosetta.services
    _ROSETTA_AVAILABLE_ = True
except ImportError, e:
    _WRN('Cannot import hss_utils.rosetta: %s' % e)
    _WRN('Rosetta access will be disabled')
    _ROSETTA_AVAILABLE_ = False


EXIT_ERRORS =  {
0: 'Success',
1: 'Not found / do not exist',
2: 'Execution error',
3: 'Execution Timeout',
4: 'Connection error',
5: 'Authentication error',
10: 'Wrong parameter value',
20: 'Command not supported',
40: 'Rosetta error',
100: 'Implementation error'
    }

# Exit status
EXIT_CODE = 0
SUCCESS = 0
NOT_FOUND = 1
EXECUTION_ERROR = 2
TIMEOUT = 3
CONNECTION_ERROR = 4
AUTHENTICATION_ERROR = 5
WRONG_PARAMETER = 10
NOT_SUPPORTED = 20
ROSETTA_ERROR = 40
IMPLEMENTATION_ERROR = 100

def get_exit_status():
    exit_status = '''\
    EXIT STATUS
'''
    for key in sorted(EXIT_ERRORS):
        exit_status += '\t%s\t%s\n' % (key, EXIT_ERRORS[key])

    return exit_status

NODE=None

def quit_program(exit_code):
    global NODE

    if NODE is not None:
        NODE.release()

    _DEB('Exit code: %s (%s)' % (exit_code, EXIT_ERRORS.get(exit_code, 'unknown error code')))
    sys.exit(exit_code)

def main():

    global NODE
    user_config = parse_commandline()
    connections = {}
    try:
        if st_command.get_ip(user_config.NODE) is None:
            _ERR('Node value %s is not valid' % user_config.NODE)
            quit_program(st_command.WRONG_PARAMETER)


        access_config = {'host':user_config.NODE,
                          'port':user_config.port,
                          'user':user_config.user}


        NODE = hss_utils.node.cba.Cba(config = access_config)
        if user_config.skip_check:
            processors = user_config.processors
        else:
            allowed_processors = copy.deepcopy(NODE.processors)
            allowed_processors += ['SC-1','SC-2']
            processors = []
            if  user_config.processors is None:
                processors = NODE.processors
            else:
                for processor in user_config.processors:
                    if processor not in allowed_processors:
                        _ERR('Processor %s not valid. Allowed values are: %s' % (processor, ' '.join(allowed_processors)))
                        quit_program(WRONG_PARAMETER)

                processors = user_config.processors

        for processor in processors:
            identity = '%s' % (str(processor))
            connections.update({identity : NODE.extend_connection(identity, processor,user='root')})

            interfaces = []
            if user_config.skip_check:
                interfaces = user_config.alb
            else:
                cmd ="ip addr list |awk -F[\ \@] '/ln_.*@/ {print $2}'"
                _INF('Executing: %s' % cmd)
                allowed_interfaces = NODE.run_command(cmd, identity)
                if user_config.alb is None:
                    interfaces = allowed_interfaces
                else:
                    for interface in user_config.alb:
                        if interface not in allowed_interfaces:
                            _WRN('ALB %s not valid. Allowed values are: %s' % (interface, ' '.join(allowed_interfaces)))
                        else:
                            interfaces.append(interface)

            for  interface in interfaces:
                cmd = 'tcpdump -i %s -s 0 -w /home/%s_%s_%s.pcap &' % (interface, identity,interface , os.getpid())
                if user_config.eth_filter is not None:
                    cmd += ' -f "%s"' % user_config.eth_filter
                _INF('Executing: %s' % cmd)
                NODE.run_command(cmd, identity, {'tcpdump: listening on %s' %  interface: '\n'}) 

    except connection.Unauthorized, e: 
        _ERR('Error: %s' % str(e))
        quit_program(AUTHENTICATION_ERROR)

    except (connection.ConnectionTimeout, connection.ConnectionFailed), e: 
        _ERR('Error: %s' % str(e))
        quit_program(CONNECTION_ERROR)

    if len(interfaces) == 0:
        _ERR('Not valid ALB found')
        quit_program(EXECUTION_ERROR)

    try:
        if user_config.capture_time is None:
            _DEB('Capturing......Press ctrl-c to stop')
            print '\n\nCapturing......Press ctrl-c to stop'
            signal.pause()
        else:
            _DEB('Capture will take %s seconds. Press ctrl-c to stop' % user_config.capture_time)
            print '\n\nCapture will take %s seconds. Press ctrl-c to stop' % user_config.capture_time
            time.sleep(float(user_config.capture_time))

    except KeyboardInterrupt:
        _DEB('Capture stopped by user!')
        print '\n Capture stopped by user!'

    for identity, value in connections.iteritems():

        process_to_kill = ''
        cmd = 'ps -eaf | grep _%s.pcap' % (os.getpid())
        _INF('Executing: %s' % cmd)
        for line in NODE.run_command(cmd, identity):
            if 'tcpdump -i' in line and 'Exit' not in line:
                process_to_kill += '%s ' % line.split()[1]

        if len(process_to_kill) > 0:
            cmd = 'kill %s' % process_to_kill
            _INF('Executing: %s' % cmd)
            NODE.run_command(cmd, identity)

    time.sleep(float(5))

    try:
        file_to_dowload = '/home/*_%s.pcap' % (os.getpid())
        _INF('Executing: download of %s' % file_to_dowload)
        NODE.download(file_to_dowload, CWD, timeout = user_config.max_time)
        cmd = 'rm  -f %s' % file_to_dowload
        _INF('Executing: %s' % cmd)
        NODE.run_command(cmd)

    except IOError, e:
        _ERR('Error copying /home/*_%s.pcap : %s' % (os.getpid(), str(e)))
        quit_program(EXECUTION_ERROR)

    except (connection.ConnectionTimeout, connection.ConnectionFailed), e: 
        _ERR('Error copying /home/*_%s.pcap : %s' % (os.getpid(), str(e)))
        quit_program(CONNECTION_ERROR)

    if user_config.skip_merge:
        _INF('The pcap files will not be merged. Use mergecap command')
        quit_program(SUCCESS)

    cmd = 'ls -ls *_%s.pcap' % os.getpid()
    _INF('Executing: %s' % cmd)
    list_of_files, error_code = st_command.execute_cmd(cmd) 
    if error_code != 0:
        _ERR('There is not pcap file to merge')
        quit_program(EXECUTION_ERROR)

    list_of_files = list_of_files.split('\n')

    file_to_merge = ''
    empty_file = ''
    for line in list_of_files:
        if len(line) > 0:
            searchObj = re.search(r'PL.*%s\.pcap' % os.getpid(),line)
            if searchObj:
                if int(line.split()[0]) != 0:
                    file_to_merge += '%s ' % searchObj.group()
                else:
                    empty_file += '%s ' % searchObj.group()

    if len(empty_file):
        _WRN('Empty pcap file: %s' % empty_file)
        cmd = 'rm %s' % empty_file
        _INF('Executing: %s' % cmd)
        os.system(cmd)

    if len(file_to_merge):
        cmd = 'mergecap -w %s %s' % (user_config.output_file , file_to_merge)
        _INF('Executing: %s' % cmd)
        out_cmd, err_cmd, error_code = st_command.execute_cmd(cmd, stderr = True)
        if error_code != 0:
            _ERR('Error when merging pcap files:%s\n%s' % (out_cmd, err_cmd))
            quit_program(EXECUTION_ERROR)

        cmd = 'rm %s' % file_to_merge
        _INF('Executing: %s' % cmd)
        os.system(cmd)
    else:
        _WRN('All the pcap files are empty')

    quit_program(SUCCESS)

def parse_commandline():

    parser = argparse.ArgumentParser(
                        formatter_class=argparse.RawDescriptionHelpFormatter,
                        description='Get a network capture on CBA. By default all the PL and all the albs are used',
                        epilog=textwrap.dedent(get_exit_status())
    )

    access_params = parser.add_argument_group('Access options')
    access_params.add_argument('-n','--node',
                        action='store', default=None,
                        help='OAM  IP address of the node. If ommitted local hostname will be used to find env in rosetta',
                        dest='NODE')

    access_params.add_argument('--port',
                      action='store', default=22,
                      help='Port used in ssh.  Default value is 22',
                      dest='port')

    access_params.add_argument('--user',
                      action='store', default='com-emergency',
                      help='User for ssh.  Default value is "com-emergency"',
                      dest='user')

    scenario_params = parser.add_argument_group('Define scenario ')
    scenario_params.add_argument('-t', '--time',
                        default=None, action='store', dest='capture_time',
                        help='Duration of the capture in sec')

    scenario_params.add_argument('-p', '--processors', nargs='+',
                        default=None, action='store', dest='processors',
                        help='List of processors')

    scenario_params.add_argument('-a', '--albs',nargs='+',
                        default=None, action='store', dest='alb',
                        help='List of ALBs')

    scenario_params.add_argument('-f', '--filter',
                        default=None, action='store', dest='eth_filter',
                        help='packet filter in libpcap filter syntax. It must be quotted')

    scenario_params.add_argument('-o', '--output',
                        default=os.path.join(CWD, 'CBA_dump_%s.pcap' % os.getpid())    , action='store', dest='output_file',
                        help='Output network capture file name. Default: %(default)s')

    scenario_params.add_argument('--max-time',
                        default=None, action='store', dest='max_time',
                        help='Max time waiting for dowloading pcap files. Default: No max timer is used')

    scenario_params.add_argument('--skip_merge',
                        default=False, action='store_true', dest='skip_merge',
                        help='DO NOT merge pcap files. User can do it using mergecap command')

    scenario_params.add_argument('--skip_check',
                        default=False, action='store_true', dest='skip_check',
                        help='DO NOT check --processors nor --albs values')

    logging=e3utils.log.add_logging_options(parser)

    args = parser.parse_args()

    e3utils.log.CONSOLE_PREFIX='(CBA_run_tcpdump_%s.log)' % os.getpid()
    e3utils.log.setup_logging_options(args)

    e3utils.log.add_file_logging(os.path.join(CWD, 'CBA_run_tcpdump_%s.log' % os.getpid()),
                                    level=e3utils.log.DEBUG)

    with open(os.path.realpath(__file__), 'r') as myself:
        _DEB('** Binary MD5: %s' % hashlib.md5(myself.read()).hexdigest())
    _DEB('** Commandline: "%s"' % ' '.join(sys.argv))


    if args.NODE is None:
        _INF('Using rosetta for getting enviroment info')
        try:
            env, config = hss_utils.rosetta.services.get_env_for_localhost()
            _INF('Environment  : %s' % env)
            args.NODE = config.get_cabinet_oam_vip(cabinet=0)
            _INF('Node         :%s' % args.NODE)

        except (hss_utils.rosetta.ObjectNotFound, hss_utils.rosetta.RosettaUnavailable), e:
            _ERR('Error: %s. Use command line parameter --node' % str(e))
            quit_program(ROSETTA_ERROR)


    try:
        if args.output_file != os.path.join(CWD, 'CBA_dump_%s.pcap' % os.getpid()):
            log_dir = os.path.dirname(args.output_file)
            if log_dir != '':
                if not os.path.exists(log_dir):
                    os.makedirs(log_dir)
    except Exception, e:
        _DEB('Exception: %s' % str(e))
        _ERR('output file value %s is not valid' % args.output_file)

    return (args)



if __name__ == '__main__':
    signal.signal(signal.SIGINT, quit_gracefully)
    try:
        main()
    except KeyboardInterrupt:
        _ERR('Unhandled Ctr-C, please report this LOG to tools team')
        _DEB('** STACK TRACE **')
        exc_type, exc_value, exc_traceback = sys.exc_info()
        for tb in traceback.format_tb(exc_traceback):
            _DEB(tb)
        quit_program(50)
    except Exception, e:
        _ERR('Unhandled Exception, please report this LOG to tools team')
        _DEB('Additional information: %s' % str(e))
        _DEB('** STACK TRACE **')
        exc_type, exc_value, exc_traceback = sys.exc_info()
        for tb in traceback.format_tb(exc_traceback):
            _DEB(tb)
        for tb in traceback.format_exception(exc_type, exc_value, exc_traceback):
            _DEB(tb)
        quit_program(IMPLEMENTATION_ERROR)

    quit_program(0)



