#!/usr/bin/python
# coding=iso-8859-1

import sys
import os
CWD = os.getcwd()
import os.path
import time
import shutil
import hashlib
import tempfile
import socket
import traceback
import argparse
import re
import pprint
import pexpect

import ntpath
import signal
import textwrap
import socket
import getpass
import json
import pprint
import random

import hss_utils
import hss_utils.st_command as st_command
import hss_utils.connection as connection
import hss_utils.node
import hss_utils.node.gentraf
import hss_utils.rosetta
import hss_utils.rosetta.services

import e3utils.log
_INF = e3utils.log.info
_DEB = e3utils.log.debug
_ERR = e3utils.log.error
_WRN = e3utils.log.warning

HOSTNAME = socket.gethostname()
USER = getpass.getuser()

def quit_gracefully(*args):
    raise KeyboardInterrupt, "Signal handler"



# Variables used
my_dict = {}
report_conn_dict = {}
report_conn_name_dict = {}
count_Total=0
show_connection=False
parser=False

def quit_program(exit_code):

    _DEB('Exit code: %s (%s)' % (exit_code, st_command.EXIT_ERRORS.get(exit_code, 'unknown error code')))
    sys.exit(exit_code)



def check_json_file(my_json_file):
    """ check connections defined in the json file generated by the C-diameter script """

    global count_Total
    with open(my_json_file, 'r') as infile:
        my_dict = json.load(infile)
    # Parsing the file to make it readible for the user when downloaded
    if parser:
         with open(my_json_file, 'w') as outfile:
            json.dump (my_dict, outfile, indent=4)

    _INF('Analyzing json file %s to check the C-Diameter connections ...' % my_json_file)
    count_Total=0
    nodes_data = {}
    ind_nodes = 0
    nodes_data = my_dict['ownNodes']
    while (ind_nodes < len(nodes_data)):
        nodes_data_info = my_dict['ownNodes'][ind_nodes]
        peers_data = nodes_data_info['peers']
        ind = 0
        while (ind < len(peers_data)):
            _DEB('peers data ind: %d ' % ind)
            peers_info_data = peers_data[ind]
            connection_info_data = peers_info_data['connections'][0]
            try:
                connection_id = connection_info_data['acceptedBy'][0]
                _DEB('Connection name fron acceptedBy parameter: %s ' % connection_id)
            except Exception as e:
                _DEB('Parameter "acceptedBy" node defined') 
                connection_id = connection_info_data['key']
                _DEB('Connection name fron key parameter: %s ' % connection_id)

            connection_id_info = connection_info_data['connId']
            _DEB('Connection pl: %s ' % connection_id_info)
            message=connection_id_info.split("(PL-",1)[1]
            num_pl=message.split(")")[0]
            if num_pl in report_conn_dict:
                report_conn_dict[num_pl] += 1
            else: # We add new item to the dict
                report_conn_dict[num_pl] = 1

            try:
                if num_pl in report_conn_name_dict:
                    report_conn_name_dict[num_pl].append(connection_id)
                    _DEB('Adding %s to the list for pl %s ' % (connection_id,num_pl))
                else: # We add new item to the dict
                    report_conn_name_dict[num_pl] = [connection_id]
                    _DEB('Initializing  %s to the list for pl %s ' % (connection_id,num_pl))
            except Exception:
                _WRN('Exception when updating list for pl %s ' % num_pl)


            count_Total += 1

            # Some peers may have 2 connections

            try:
                connection_info_data = peers_info_data['connections'][1]
                try:
                    _DEB('Checking second connection defined') 
                    connection_id = connection_info_data['acceptedBy'][0]
                    _DEB('Connection name fron acceptedBy parameter: %s ' % connection_id)
                except Exception as e:
                    _DEB('Parameter "acceptedBy" node defined') 
                    connection_id = connection_info_data['key']
                    _DEB('Connection name fron key parameter: %s ' % connection_id)

                connection_id_info = connection_info_data['connId']
                _DEB('Connection pl: %s ' % connection_id_info)
                message=connection_id_info.split("(PL-",1)[1]
                num_pl=message.split(")")[0]
                if num_pl in report_conn_dict:
                    report_conn_dict[num_pl] += 1
                else: # We add new item to the dict
                    report_conn_dict[num_pl] = 1
                count_Total += 1

                try:
                    if num_pl in report_conn_name_dict:
                        report_conn_name_dict[num_pl].append(connection_id)
                        _DEB('Adding %s to the list for pl %s ' % (connection_id,num_pl))
                    else: # We add new item to the dict
                        report_conn_name_dict[num_pl] = [connection_id]
                        _DEB('Initializing  %s to the list for pl %s ' % (connection_id,num_pl))
                except Exception:
                    _WRN('Exception when updating list for pl %s ' % num_pl)

            except Exception as e:
                _DEB('Only one connection defined') 


            ind+=1

        ind_nodes+=1


    _INF('Total Number of C-Diameter connections: %s ' % str(count_Total))
    info_num_conn = 'Number of C-Diameter connections per Payload:'
    for key,val in report_conn_dict.items():
        info_num_conn = info_num_conn + '\n\tPL-%s => %s' % (key,val)
    _INF('%s\n' % info_num_conn)

    if show_connection:
        _INF('List of C-Diameter connections per Payload:')
        for key,list_conns in report_conn_name_dict.items():
            _INF(' =======    Connections in PL-%s    =======:' % key)
            for connection_name in list_conns:
                _INF('\t%s' % connection_name)

def parse_commandline():
    global CWD

    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawTextHelpFormatter,
        description=textwrap.dedent('''
        Analyze the JSON file generated by the C-Diameter dump_transport script from one of the Payloads, reporting the number of C-Diamenter connections per Payload.

        '''),
        epilog=textwrap.dedent(st_command.get_exit_status()))

    access_params = parser.add_argument_group('Access parameters')
    access_params.add_argument('-n','--node',
                        action='store', default=None,
                        help='''OAM  IP address of the node.
If ommitted local hostname will be used to find env in rosetta ''',
                        dest='NODE')

    access_params.add_argument('--port',
                      action='store', default=22,
                      help='Port used in ssh.  Default value is 22',
                      dest='port')

    access_params.add_argument('--user',
                      action='store', default='com-emergency',
                      help='User for ssh.  Default value is "com-emergency"',
                      dest='user')

    access_params.add_argument('-o','--output_path',
                      action='store', default='.',
                      help='C-Diameter json files will be stored in this path',
                      dest='output_path')

    scenario_params = parser.add_argument_group('Define scenario ')
    scenario_params.add_argument('-f', '--file',
                        action='store', default=None,
                        help='Optional. JSON file with the C-Diamenter information to anaylze. \nIf not, it will collect the file from the environment using the access parameters. ',
                        dest='json_file')

    scenario_params.add_argument('--connections',
                        default=False, action='store_true', dest='show_connection',
                        help='Optional. It will report the list of the connections per PL, not just the number. ')

    logging=e3utils.log.add_logging_options(parser)
    args = parser.parse_args()

    e3utils.log.CONSOLE_PREFIX='(CBA_check_diacc_dump_json%s.log)' % os.getpid()
    e3utils.log.setup_logging_options(args)

    if args.log_file is None:
        e3utils.log.add_file_logging(os.path.join(CWD, 'CBA_check_diacc_dump_json%s.log' % os.getpid()),
                                     level=e3utils.log.INFO)

    with open(os.path.realpath(__file__), 'r') as myself:
        _DEB('** Binary MD5: %s' % hashlib.md5(myself.read()).hexdigest())
    _DEB('** Commandline: "%s"' % ' '.join(sys.argv))

    return (args)



def main():

    global show_connection
    global parser
    args = parse_commandline()

    if args.show_connection:
        show_connection = True
        _DEB('Showing connection at the end of the execution   ')

    if args.json_file is None:
        parser = True 
        _INF('Getting diacc dump json file from the environment')
        if args.NODE is None:
            cmd = 'CBA_get_diacc_dump_json --user %s --port %s -o %s ' % (args.user, args.port, args.output_path)
        else:
            cmd = 'CBA_get_diacc_dump_json --node %s --user %s --port %s -o %s ' % (args.NODE, args.user, args.port, args.output_path)

        _DEB('Executing command: %s' % cmd)
        (output,output_err,output_code) = st_command.execute_cmd(cmd, stdout=True, stderr=True)
        if output_code:
            _ERR('Error when downloading the C-Diameter dump json file')
            _ERR(output_err)
            quit_program(st_command.EXECUTION_ERROR)

        json_file=args.output_path+'/C-Diameter_transport_dump.json'

        # Renaming the json file when downloaded from HSS environment
        new_json_file=args.output_path+'/C-Diameter_transport_dump_%s.json' % os.getpid()
        cmd = 'mv %s %s' % (json_file, new_json_file)
        (output,output_err,output_code) = st_command.execute_cmd(cmd, stdout=True, stderr=True)
        if output_code:
            _ERR('ERROR when renaming json file')
            _ERR(output_err)
            quit_program(st_command.EXECUTION_ERROR)
    else:
        # NO renaming when passed as parameter
        new_json_file=args.json_file

    cmd = 'ls -l  %s' % new_json_file
    (output,output_err,output_code) = st_command.execute_cmd(cmd, stdout=True, stderr=True)
    if output_code:
        _ERR('C-Diameter dump json file does not exist')
        _ERR(output_err)
        quit_program(st_command.EXECUTION_ERROR)


    # Checking if the file is empty (no traffic)
    if os.stat(new_json_file).st_size == 0:
        _INF('C-Diameter dump json file is empty. Not traffic running.')
    else:
        _INF('Checking file: %s' % new_json_file)
        check_json_file(new_json_file)


if __name__ == '__main__':
    CWD = os.getcwd()
    signal.signal(signal.SIGINT, quit_gracefully)

    try:
        main()
    except KeyboardInterrupt:
        _ERR('Unhandled Ctr-C, please report this LOG to tools team')
        _DEB('** STACK TRACE **')
        exc_type, exc_value, exc_traceback = sys.exc_info()
        for tb in traceback.format_tb(exc_traceback):
            _DEB(tb)
        quit_program(50)
    except Exception, e:
        _ERR('Unhandled Exception, please report this LOG to tools team')
        _DEB('Additional information: %s' % str(e))
        _DEB('** STACK TRACE **')
        exc_type, exc_value, exc_traceback = sys.exc_info()
        for tb in traceback.format_tb(exc_traceback):
            _DEB(tb)
        for tb in traceback.format_exception(exc_type, exc_value, exc_traceback):
            _DEB(tb)
        quit_program(st_command.IMPLEMENTATION_ERROR)

    quit_program(0)


